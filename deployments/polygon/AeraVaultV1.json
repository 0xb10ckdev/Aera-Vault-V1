{
  "address": "0x5da8e01E6Cc14FEd533c73181Dd631e0C69129b7",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "weights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "guardian",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "noticePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "merkleOrchard",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct IAeraVaultV1.NewVaultParams",
          "name": "vaultParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "Aera__AmountExceedAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "Aera__AmountIsBelowMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__BalanceChangedInCurrentBlock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__CallerIsNotGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__CallerIsNotOwnerOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__CannotSetSwapFeeBeforeCooldown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__CannotSweepPoolToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__DescriptionIsEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sortedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Aera__DifferentTokensInPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__FinalizationNotInitiated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "Aera__GuardianIsOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__GuardianIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Aera__ManagementFeeIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Aera__NoAvailableFeeForCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__NoPendingOwnershipTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__NotPendingOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Aera__NoticePeriodIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "noticeTimeoutAt",
          "type": "uint256"
        }
      ],
      "name": "Aera__NoticeTimeoutNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__OwnerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__PoolSwapIsAlreadyEnabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Aera__SwapFeePercentageChangeIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numAllowances",
          "type": "uint256"
        }
      ],
      "name": "Aera__ValidatorIsNotMatched",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "Aera__ValidatorIsNotValid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numValues",
          "type": "uint256"
        }
      ],
      "name": "Aera__ValueLengthIsNotSame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__VaultIsAlreadyFinalized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__VaultIsAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__VaultIsFinalizing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__VaultIsNotRenounceable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__VaultNotInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "Aera__WeightChangeDurationIsBelowMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Aera__WeightChangeEndBeforeStart",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Aera__WeightChangeEndTimeIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Aera__WeightChangeRatioIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Aera__WeightChangeStartTimeIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Aera__WeightIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "Aera__WeightIsBelowMin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "CancelWeightUpdates",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noticePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "merkleOrchard",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "requestedAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "DistributeGuardianFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "EnabledTradingWithWeights",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noticeTimeoutAt",
          "type": "uint256"
        }
      ],
      "name": "FinalizationInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGuardian",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "canceledOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapEnabled",
          "type": "bool"
        }
      ],
      "name": "SetSwapEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "name": "SetSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "UpdateWeightsGradually",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "requestedAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "allowances",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bVault",
      "outputs": [
        {
          "internalType": "contract IBVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelOwnershipTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelWeightUpdates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGuardianFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "distributionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "distributor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct IBMerkleOrchard.Claim[]",
          "name": "claims",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolAPI.TokenValue[]",
          "name": "tokenWithAmount",
          "type": "tuple[]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolAPI.TokenValue[]",
          "name": "tokenWithAmount",
          "type": "tuple[]"
        }
      ],
      "name": "depositIfBalanceUnchanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableTradingRiskingArbitrage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolAPI.TokenValue[]",
          "name": "tokenWithWeight",
          "type": "tuple[]"
        }
      ],
      "name": "enableTradingWithWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHoldings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNormalizedWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokensData",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "guardiansFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "guardiansFeeTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "holding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolAPI.TokenValue[]",
          "name": "tokenWithAmount",
          "type": "tuple[]"
        }
      ],
      "name": "initialDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initiateFinalization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSwapFeeCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleOrchard",
      "outputs": [
        {
          "internalType": "contract IBMerkleOrchard",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noticePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noticeTimeoutAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IBManagedPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolController",
      "outputs": [
        {
          "internalType": "contract IBManagedPoolController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolAPI.TokenValue[]",
          "name": "tokenWithWeight",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "updateWeightsGradually",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validator",
      "outputs": [
        {
          "internalType": "contract IWithdrawalValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolAPI.TokenValue[]",
          "name": "tokenWithAmount",
          "type": "tuple[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolAPI.TokenValue[]",
          "name": "tokenWithAmount",
          "type": "tuple[]"
        }
      ],
      "name": "withdrawIfBalanceUnchanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
  "receipt": {
    "to": null,
    "from": "0xA3b78855D8de9846ABD478a47b81579d1651deA8",
    "contractAddress": "0x5da8e01E6Cc14FEd533c73181Dd631e0C69129b7",
    "transactionIndex": 40,
    "gasUsed": "11322285",
    "logsBloom": "0x00000000000000000000002000200100000000000000000c00800000004000000000000000000000000200010010000000008000002000000000000000000000100000004000000000000100000000880001000000000000000100080000000008008000020080200000000000000800000000000000001080000090220000400000004000000008200000100400080000000000040040022040000040000000200000000000802000000001000000122000004002000180000100020000004040200000800000004101800080000000000000100000000001100000000020040000020400000000000000004000010000020000000000000000006000112002",
    "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f",
    "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x5da8e01E6Cc14FEd533c73181Dd631e0C69129b7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a3b78855d8de9846abd478a47b81579d1651dea8"
        ],
        "data": "0x",
        "logIndex": 204,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x7205D04b58b71dE54450403F850a247EB2002207",
        "topics": [
          "0xa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000e8d4a51000",
        "logIndex": 205,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
        "topics": [
          "0x3c13bc30b8e878c53fd2a36b679409c073afd75950be43d8858768e956fbc20e",
          "0x7205d04b58b71de54450403f850a247eb2002207000200000000000000000ad2",
          "0x0000000000000000000000007205d04b58b71de54450403f850a247eb2002207"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 206,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
        "topics": [
          "0xf5847d3f2197b16cdcd2098ec95d0905cd1abdaf415f07bb7cef2bba8ac5dec4",
          "0x7205d04b58b71de54450403f850a247eb2002207000200000000000000000ad2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a06300000000000000000000000000000000000000000000000000000000000000020000000000000000000000005da8e01e6cc14fed533c73181dd631e0c69129b70000000000000000000000005da8e01e6cc14fed533c73181dd631e0c69129b7",
        "logIndex": 207,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x7205D04b58b71dE54450403F850a247EB2002207",
        "topics": [
          "0x0f3631f9dab08169d1db21c6dc5f32536fb2b0a6b9bb5330d71c52132f968be0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000640a414800000000000000000000000000000000000000000000000000000000640a4148000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000c7d713b49da00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000c7d713b49da0000",
        "logIndex": 208,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x7205D04b58b71dE54450403F850a247EB2002207",
        "topics": [
          "0x5a9e84f78f7957cb4ed7478eb0fcad35ee4ecbe2e0f298420b28a3955392573f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 209,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x7205D04b58b71dE54450403F850a247EB2002207",
        "topics": [
          "0x5353e2cb47d505ba9b628610daec53fc41f3a4259dab35a757b0f1d5a58bc1c3"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 210,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x7205D04b58b71dE54450403F850a247EB2002207",
        "topics": [
          "0xeba99e9e36df79031493efd8473cfce5475d3a135878665490df8b0140693210"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 211,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0xFaE5DA6D5890cCBb770233b12ce1045B7369775F",
        "topics": [
          "0x83a48fbcfc991335314e74d0496aab6a1987e992ddc85dddbcc4d6dd6ef2e9fc",
          "0x0000000000000000000000007205d04b58b71de54450403f850a247eb2002207"
        ],
        "data": "0x",
        "logIndex": 212,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x008f0831b55553381aB981B8f535B80d1F9BF822",
        "topics": [
          "0xc012cad94142b9dc7a12bdf812a34994222bbd205cfc75dafeadd0c9ee9bc7d9",
          "0x0000000000000000000000007205d04b58b71de54450403f850a247eb2002207",
          "0x000000000000000000000000b2dc72337916f6eda344ebbba12b2f032e7c82fa"
        ],
        "data": "0x",
        "logIndex": 213,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x5da8e01E6Cc14FEd533c73181Dd631e0C69129b7",
        "topics": [
          "0x91ef1cf10f75ecc4382f0f95f6322be3a80e6244d49f75f37bf58a6caf9a7b7f",
          "0x000000000000000000000000008f0831b55553381ab981b8f535b80d1f9bf822",
          "0x0000000000000000000000003345261fdae0bc146b2f45484dcceb4708a3fec4",
          "0x0000000000000000000000003154eb27b58dfa3800ef439edfccbd5ca1a7e959"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000f3e0c4218b7b0108a3643cfe9d3ec0d4f57c54e0000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000474657374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004544553540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000c7d713b49da00000000000000000000000000000000000000000000000000000000000000000010706f6c79676f6e746573747661756c7400000000000000000000000000000000",
        "logIndex": 214,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x5da8e01E6Cc14FEd533c73181Dd631e0C69129b7",
        "topics": [
          "0xa14fc14d8620a708a896fd11392a235647d99385500a295f0d7da2a258b2e967",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003345261fdae0bc146b2f45484dcceb4708a3fec4"
        ],
        "data": "0x",
        "logIndex": 215,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 40158013,
        "transactionHash": "0x8b62a2c63047c57d40276fef9719a7fdb87458a8571337557dcb28704aa0029d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a3b78855d8de9846abd478a47b81579d1651dea8",
          "0x00000000000000000000000046a3a41bd932244dd08186e4c19f1a7e48cbcdf4"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000c125bd9dc923085000000000000000000000000000000000000000000000000d89ac094d68724370000000000000000000000000000000000000000000014b7e66ed3ef5ea4be72000000000000000000000000000000000000000000000000cc8864baf9f4f3b20000000000000000000000000000000000000000000014b7f2812fc93b36eef7",
        "logIndex": 216,
        "blockHash": "0x31e82012b5490c6372b29b37f6c675302286d9f95bee611b655624ea29d1ea6f"
      }
    ],
    "blockNumber": 40158013,
    "cumulativeGasUsed": "18874963",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "factory": "0x008f0831b55553381aB981B8f535B80d1F9BF822",
      "name": "test",
      "symbol": "TEST",
      "tokens": [
        "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
        "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063"
      ],
      "weights": [
        "100000000000000000",
        "900000000000000000"
      ],
      "swapFeePercentage": "1000000000000",
      "guardian": "0x3345261FDae0BC146B2F45484DcCeB4708a3FEC4",
      "validator": "0x3154Eb27b58DFA3800EF439eDFccBd5ca1A7E959",
      "noticePeriod": "30",
      "managementFee": "100000",
      "merkleOrchard": "0x0F3e0c4218b7b0108a3643cFe9D3ec0d4F57c54e",
      "description": "polygontestvault"
    }
  ],
  "solcInputHash": "3729d1470369ff92ae2f9e550c9c6f96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"noticePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"merkleOrchard\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IAeraVaultV1.NewVaultParams\",\"name\":\"vaultParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"Aera__AmountExceedAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Aera__AmountIsBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__BalanceChangedInCurrentBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__CallerIsNotGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__CallerIsNotOwnerOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__CannotSetSwapFeeBeforeCooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__CannotSweepPoolToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__DescriptionIsEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sortedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Aera__DifferentTokensInPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__FinalizationNotInitiated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"Aera__GuardianIsOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__GuardianIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__ManagementFeeIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Aera__NoAvailableFeeForCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__NoPendingOwnershipTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__NotPendingOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__NoticePeriodIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noticeTimeoutAt\",\"type\":\"uint256\"}],\"name\":\"Aera__NoticeTimeoutNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__OwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__PoolSwapIsAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__SwapFeePercentageChangeIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAllowances\",\"type\":\"uint256\"}],\"name\":\"Aera__ValidatorIsNotMatched\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Aera__ValidatorIsNotValid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numValues\",\"type\":\"uint256\"}],\"name\":\"Aera__ValueLengthIsNotSame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultIsAlreadyFinalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultIsAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultIsFinalizing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultIsNotRenounceable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightChangeDurationIsBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__WeightChangeEndBeforeStart\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightChangeEndTimeIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightChangeRatioIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightChangeStartTimeIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightIsBelowMin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"CancelWeightUpdates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noticePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"merkleOrchard\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestedAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"DistributeGuardianFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"EnabledTradingWithWeights\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noticeTimeoutAt\",\"type\":\"uint256\"}],\"name\":\"FinalizationInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGuardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"canceledOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"SetSwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"SetSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"UpdateWeightsGradually\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestedAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"allowances\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bVault\",\"outputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWeightUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGuardianFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"distributionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IBMerkleOrchard.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"depositIfBalanceUnchanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTradingRiskingArbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithWeight\",\"type\":\"tuple[]\"}],\"name\":\"enableTradingWithWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNormalizedWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensData\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guardiansFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guardiansFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"holding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"initialDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateFinalization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapFeeCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleOrchard\",\"outputs\":[{\"internalType\":\"contract IBMerkleOrchard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticeTimeoutAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IBManagedPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolController\",\"outputs\":[{\"internalType\":\"contract IBManagedPoolController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithWeight\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"updateWeightsGradually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"contract IWithdrawalValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"withdrawIfBalanceUnchanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Vault owner is the asset owner.\",\"events\":{\"CancelWeightUpdates(uint256[])\":{\"params\":{\"weights\":\"Current weights of tokens.\"}},\"Created(address,string,string,address[],uint256[],uint256,address,address,uint256,uint256,address,string)\":{\"params\":{\"description\":\"Vault description.\",\"factory\":\"Balancer Managed Pool factory address.\",\"guardian\":\"Vault guardian address.\",\"managementFee\":\"Management fee earned proportion per second.\",\"merkleOrchard\":\"Merkle Orchard address.\",\"name\":\"Name of Pool Token.\",\"noticePeriod\":\"Notice period (in seconds).\",\"swapFeePercentage\":\"Pool swap fee.\",\"symbol\":\"Symbol of Pool Token.\",\"tokens\":\"Token addresses.\",\"validator\":\"Withdrawal validator contract address.\",\"weights\":\"Token weights.\"}},\"Deposit(uint256[],uint256[],uint256[])\":{\"params\":{\"amounts\":\"Deposited amounts.\",\"requestedAmounts\":\"Requested amounts to deposit.\",\"weights\":\"Token weights following deposit.\"}},\"DistributeGuardianFees(address,uint256[])\":{\"params\":{\"amounts\":\"Withdrawn amounts.\",\"guardian\":\"Guardian address.\"}},\"EnabledTradingWithWeights(uint256,uint256[])\":{\"params\":{\"time\":\"timestamp of updates.\",\"weights\":\"Target weights of tokens.\"}},\"FinalizationInitiated(uint256)\":{\"params\":{\"noticeTimeoutAt\":\"Timestamp for notice timeout.\"}},\"Finalized(address,uint256[])\":{\"params\":{\"amounts\":\"Returned token amounts.\",\"caller\":\"Address of finalizer.\"}},\"GuardianChanged(address,address)\":{\"params\":{\"guardian\":\"New guardian address.\",\"previousGuardian\":\"Previous guardian address.\"}},\"OwnershipTransferCanceled(address,address)\":{\"params\":{\"canceledOwner\":\"Address of canceled owner.\",\"currentOwner\":\"Address of current owner.\"}},\"OwnershipTransferOffered(address,address)\":{\"params\":{\"currentOwner\":\"Address of current owner.\",\"pendingOwner\":\"Address of pending owner.\"}},\"SetSwapEnabled(bool)\":{\"params\":{\"swapEnabled\":\"New state of swap.\"}},\"SetSwapFee(uint256)\":{\"params\":{\"swapFee\":\"New swap fee.\"}},\"UpdateWeightsGradually(uint256,uint256,uint256[])\":{\"params\":{\"endTime\":\"End timestamp of updates.\",\"startTime\":\"Start timestamp of updates.\",\"weights\":\"Target weights of tokens.\"}},\"Withdraw(uint256[],uint256[],uint256[],uint256[])\":{\"params\":{\"allowances\":\"Token withdrawal allowances.\",\"amounts\":\"Withdrawn amounts.\",\"requestedAmounts\":\"Requested amounts to withdraw.\",\"weights\":\"Token weights following withdrawal.\"}}},\"kind\":\"dev\",\"methods\":{\"cancelWeightUpdates()\":{\"details\":\"Keep calculated weights from the schedule at the time.\"},\"claimGuardianFees()\":{\"details\":\"This function shouldn't be called too frequently.\"},\"claimRewards((uint256,uint256,address,uint256,bytes32[])[],address[])\":{\"details\":\"It calls claimDistributions() function of Balancer MerkleOrchard.      Once this function is called, the tokens will be transferred to      the Vault and it can be distributed via sweep function.\",\"params\":{\"claims\":\"An array of claims provided as a claim struct.        See https://docs.balancer.fi/products/merkle-orchard/claiming-tokens#claiming-from-the-contract-directly.\",\"tokens\":\"An array consisting of tokens to be claimed.\"}},\"constructor\":{\"details\":\"Tokens should be unique. Validator should conform to interface.      These are checked by Balancer in internal transactions:       If tokens are sorted in ascending order.       If swapFeePercentage is greater than minimum and less than maximum.       If total sum of weights is one.\",\"params\":{\"vaultParams\":\"Struct vault parameter.\"}},\"deposit((address,uint256)[])\":{\"details\":\"It calls updateWeights() function      which cancels current active weights change schedule.\",\"params\":{\"tokenWithAmount\":\"Deposit tokens with amount.\"}},\"depositIfBalanceUnchanged((address,uint256)[])\":{\"details\":\"It calls updateWeights() function      which cancels current active weights change schedule.      It reverts if balances were updated in the current block.\",\"params\":{\"tokenWithAmount\":\"Deposit token with amount.\"}},\"enableTradingWithWeights((address,uint256)[])\":{\"details\":\"These are checked by Balancer in internal transactions:       If weight length and token length match.       If total sum of weights is one.       If weight is greater than minimum.\",\"params\":{\"tokenWithWeight\":\"Tokens with new weights.\"}},\"getHoldings()\":{\"returns\":{\"amounts\":\"Token balances in underlying pool\"}},\"getNormalizedWeights()\":{\"returns\":{\"_0\":\"Normalized weights of tokens on Balancer pool.\"}},\"getSwapFee()\":{\"returns\":{\"_0\":\"Swap fee from underlying Balancer pool.\"}},\"getTokens()\":{\"returns\":{\"tokens\":\"IERC20 tokens of Balancer pool.\"}},\"getTokensData()\":{\"returns\":{\"_0\":\"IERC20 tokens of Balancer pool.\",\"_1\":\"Balances of tokens of Balancer pool.\",\"_2\":\"Last updated Blocknumber.\"}},\"holding(uint256)\":{\"returns\":{\"_0\":\"Token balance in underlying pool.\"}},\"initialDeposit((address,uint256)[])\":{\"details\":\"Initial deposit must be performed before      calling withdraw() or deposit() functions.      It enables trading, so weights and balances should be in line      with market spot prices, otherwise there is a significant risk      of arbitrage.      This is checked by Balancer in internal transactions:       If token amount is not zero when join pool.\",\"params\":{\"tokenWithAmount\":\"Deposit tokens with amount.\"}},\"isSwapEnabled()\":{\"returns\":{\"_0\":\"If public swap is turned on, returns true, otherwise false.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"setSwapFee(uint256)\":{\"details\":\"These are checked by Balancer in internal transactions:       If new swap fee is less than maximum.       If new swap fee is greater than minimum.\"},\"transferOwnership(address)\":{\"details\":\"It disables immediate transfer of ownership\"},\"updateWeightsGradually((address,uint256)[],uint256,uint256)\":{\"details\":\"These are checked by Balancer in internal transactions:       If target weight length and token length match.       If total sum of target weights is one.       If target weight is greater than minimum.\",\"params\":{\"endTime\":\"Timestamp at which the weights should reach target values.\",\"startTime\":\"Timestamp at which weight movement should start.\",\"tokenWithWeight\":\"Tokens with target weights.\"}},\"withdraw((address,uint256)[])\":{\"details\":\"It calls updateWeights() function      which cancels current active weights change schedule.\",\"params\":{\"tokenWithAmount\":\"Requested tokens with amount.\"}},\"withdrawIfBalanceUnchanged((address,uint256)[])\":{\"details\":\"It calls updateWeights() function      which cancels current active weights change schedule.      It reverts if balances were updated in the current block.\",\"params\":{\"tokenWithAmount\":\"Requested tokens with amount.\"}}},\"stateVariables\":{\"MAX_MANAGEMENT_FEE\":{\"details\":\"0.0000001% per second, i.e. 3.1536% per year.      0.0000001% * (365 * 24 * 60 * 60) = 3.1536%\"},\"MAX_WEIGHT_CHANGE_RATIO\":{\"details\":\"It's the increment/decrement factor per one second.      increment/decrement factor per n seconds: Fn = f * n      Weight growth range for n seconds: [1 / Fn - 1, Fn - 1]      E.g. increment/decrement factor per 2000 seconds is 2      Weight growth range for 2000 seconds is [-50%, 100%]\"},\"UNSET_GUARDIAN_ADDRESS\":{\"details\":\"Address to represent unset guardian in events.\"},\"description\":{\"details\":\"string cannot be immutable bytecode but only set in constructor\"},\"managementFee\":{\"details\":\"10**18 is 100%\"}},\"title\":\"Risk-managed treasury vault.\",\"version\":1},\"userdoc\":{\"errors\":{\"Aera__ValueLengthIsNotSame(uint256,uint256)\":[{\"notice\":\"ERRORS ///\"}]},\"events\":{\"CancelWeightUpdates(uint256[])\":{\"notice\":\"Emitted when cancelWeightUpdates is called.\"},\"Created(address,string,string,address[],uint256[],uint256,address,address,uint256,uint256,address,string)\":{\"notice\":\"Emitted when the vault is created.\"},\"Deposit(uint256[],uint256[],uint256[])\":{\"notice\":\"Emitted when tokens are deposited.\"},\"DistributeGuardianFees(address,uint256[])\":{\"notice\":\"Emitted when management fees are withdrawn.\"},\"EnabledTradingWithWeights(uint256,uint256[])\":{\"notice\":\"Emitted when enableTradingWithWeights is called.\"},\"FinalizationInitiated(uint256)\":{\"notice\":\"Emitted when initiateFinalization is called.\"},\"Finalized(address,uint256[])\":{\"notice\":\"Emitted when vault is finalized.\"},\"GuardianChanged(address,address)\":{\"notice\":\"Emitted when guardian is changed.\"},\"OwnershipTransferCanceled(address,address)\":{\"notice\":\"Emitted when cancelOwnershipTransfer is called.\"},\"OwnershipTransferOffered(address,address)\":{\"notice\":\"Emitted when transferOwnership is called.\"},\"SetSwapEnabled(bool)\":{\"notice\":\"Emitted when swap is enabled/disabled.\"},\"SetSwapFee(uint256)\":{\"notice\":\"Emitted when swap fee is updated.\"},\"UpdateWeightsGradually(uint256,uint256,uint256[])\":{\"notice\":\"Emitted when updateWeightsGradually is called.\"},\"Withdraw(uint256[],uint256[],uint256[],uint256[])\":{\"notice\":\"Emitted when tokens are withdrawn.\"}},\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accept ownership\"},\"bVault()\":{\"notice\":\"Balancer Vault.\"},\"cancelOwnershipTransfer()\":{\"notice\":\"Cancel current pending ownership transfer\"},\"cancelWeightUpdates()\":{\"notice\":\"Cancel the active weight update schedule.\"},\"claimGuardianFees()\":{\"notice\":\"Claim guardian fee.\"},\"claimRewards((uint256,uint256,address,uint256,bytes32[])[],address[])\":{\"notice\":\"Claim Balancer rewards.\"},\"constructor\":{\"notice\":\"Initialize the contract by deploying new Balancer pool using the provided factory.\"},\"deposit((address,uint256)[])\":{\"notice\":\"Deposit tokens into vault.\"},\"depositIfBalanceUnchanged((address,uint256)[])\":{\"notice\":\"Deposit tokens into vault.\"},\"description()\":{\"notice\":\"Describes vault purpose and modelling assumptions for differentiating between vaults\"},\"disableTrading()\":{\"notice\":\"Disable swap.\"},\"enableTradingRiskingArbitrage()\":{\"notice\":\"Enable swap with current weights.\"},\"enableTradingWithWeights((address,uint256)[])\":{\"notice\":\"Enable swap with updating weights.\"},\"finalize()\":{\"notice\":\"Destroy vault and returns all funds to treasury owner.\"},\"finalized()\":{\"notice\":\"Indicates that the Vault has been finalized\"},\"getHoldings()\":{\"notice\":\"Underlying token balances.\"},\"getNormalizedWeights()\":{\"notice\":\"Get token weights.\"},\"getSwapFee()\":{\"notice\":\"Get swap fee.\"},\"getTokens()\":{\"notice\":\"Get IERC20 Tokens Balancer Pool.\"},\"getTokensData()\":{\"notice\":\"Get Token Data of Balancer Pool.\"},\"guardian()\":{\"notice\":\"Controls vault parameters.\"},\"guardiansFee(address,uint256)\":{\"notice\":\"Fee earned amount for each guardian\"},\"guardiansFeeTotal(uint256)\":{\"notice\":\"Total guardian fee earned amount\"},\"holding(uint256)\":{\"notice\":\"Balance of token with given index.\"},\"initialDeposit((address,uint256)[])\":{\"notice\":\"Initialize Vault with first deposit.\"},\"initialized()\":{\"notice\":\"Indicates that the Vault has been initialized\"},\"initiateFinalization()\":{\"notice\":\"Initiate vault destruction and return all funds to treasury owner.\"},\"isSwapEnabled()\":{\"notice\":\"Check if vault trading is enabled.\"},\"lastFeeCheckpoint()\":{\"notice\":\"Last timestamp where guardian fee index was locked.\"},\"lastSwapFeeCheckpoint()\":{\"notice\":\"Last timestamp where swap fee was updated.\"},\"managementFee()\":{\"notice\":\"Management fee earned proportion per second.\"},\"merkleOrchard()\":{\"notice\":\"Balancer Merkle Orchard.\"},\"noticePeriod()\":{\"notice\":\"Notice period for vault termination (in seconds).\"},\"noticeTimeoutAt()\":{\"notice\":\"Timestamp when notice elapses or 0 if not yet set\"},\"pendingOwner()\":{\"notice\":\"Pending account to accept ownership of vault.\"},\"pool()\":{\"notice\":\"Balancer Managed Pool.\"},\"poolController()\":{\"notice\":\"Balancer Managed Pool Controller.\"},\"poolId()\":{\"notice\":\"Pool ID of Balancer pool on Vault.\"},\"renounceOwnership()\":{\"notice\":\"Disable ownership renounceable\"},\"setGuardian(address)\":{\"notice\":\"Change guardian.\"},\"setSwapFee(uint256)\":{\"notice\":\"Change swap fee.\"},\"sweep(address,uint256)\":{\"notice\":\"Withdraw any tokens accidentally sent to vault.\"},\"transferOwnership(address)\":{\"notice\":\"Offer ownership to another address\"},\"updateWeightsGradually((address,uint256)[],uint256,uint256)\":{\"notice\":\"Initiate weight move to target in given update window.\"},\"validator()\":{\"notice\":\"Verifies withdraw limits.\"},\"withdraw((address,uint256)[])\":{\"notice\":\"Withdraw tokens up to requested amounts.\"},\"withdrawIfBalanceUnchanged((address,uint256)[])\":{\"notice\":\"Withdraw tokens up to requested amounts.\"}},\"notice\":\"Managed n-asset vault that supports withdrawals         in line with a pre-defined validator contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v1/AeraVaultV1.sol\":\"AeraVaultV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/v1/AeraVaultV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"./dependencies/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/Ownable.sol\\\";\\nimport \\\"./dependencies/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"./dependencies/openzeppelin/Math.sol\\\";\\nimport \\\"./dependencies/openzeppelin/ERC165Checker.sol\\\";\\nimport \\\"./interfaces/IBManagedPoolFactory.sol\\\";\\nimport \\\"./interfaces/IBManagedPoolController.sol\\\";\\nimport \\\"./interfaces/IBMerkleOrchard.sol\\\";\\nimport \\\"./interfaces/IBVault.sol\\\";\\nimport \\\"./interfaces/IBManagedPool.sol\\\";\\nimport \\\"./interfaces/IAeraVaultV1.sol\\\";\\nimport \\\"./interfaces/IWithdrawalValidator.sol\\\";\\n\\n/// @title Risk-managed treasury vault.\\n/// @notice Managed n-asset vault that supports withdrawals\\n///         in line with a pre-defined validator contract.\\n/// @dev Vault owner is the asset owner.\\ncontract AeraVaultV1 is IAeraVaultV1, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// STORAGE ///\\n\\n    uint256 internal constant ONE = 10**18;\\n\\n    /// @notice Minimum period for weight change duration.\\n    uint256 private constant MINIMUM_WEIGHT_CHANGE_DURATION = 4 hours;\\n\\n    /// @notice Maximum absolute change in swap fee.\\n    uint256 private constant MAXIMUM_SWAP_FEE_PERCENT_CHANGE = 0.005e18;\\n\\n    /// @dev Address to represent unset guardian in events.\\n    address private constant UNSET_GUARDIAN_ADDRESS = address(0);\\n\\n    /// @notice Largest possible notice period for vault termination (2 months).\\n    uint256 private constant MAX_NOTICE_PERIOD = 60 days;\\n\\n    /// @notice Cooldown period for updating swap fee (1 minute).\\n    uint256 private constant SWAP_FEE_COOLDOWN_PERIOD = 1 minutes;\\n\\n    /// @notice Largest possible weight change ratio per one second.\\n    /// @dev It's the increment/decrement factor per one second.\\n    ///      increment/decrement factor per n seconds: Fn = f * n\\n    ///      Weight growth range for n seconds: [1 / Fn - 1, Fn - 1]\\n    ///      E.g. increment/decrement factor per 2000 seconds is 2\\n    ///      Weight growth range for 2000 seconds is [-50%, 100%]\\n    uint256 private constant MAX_WEIGHT_CHANGE_RATIO = 10**15;\\n\\n    /// @notice Largest management fee earned proportion per one second.\\n    /// @dev 0.0000001% per second, i.e. 3.1536% per year.\\n    ///      0.0000001% * (365 * 24 * 60 * 60) = 3.1536%\\n    uint256 private constant MAX_MANAGEMENT_FEE = 10**9;\\n\\n    /// @notice Balancer Vault.\\n    IBVault public immutable bVault;\\n\\n    /// @notice Balancer Managed Pool.\\n    IBManagedPool public immutable pool;\\n\\n    /// @notice Balancer Managed Pool Controller.\\n    IBManagedPoolController public immutable poolController;\\n\\n    /// @notice Balancer Merkle Orchard.\\n    IBMerkleOrchard public immutable merkleOrchard;\\n\\n    /// @notice Pool ID of Balancer pool on Vault.\\n    bytes32 public immutable poolId;\\n\\n    /// @notice Notice period for vault termination (in seconds).\\n    uint256 public immutable noticePeriod;\\n\\n    /// @notice Verifies withdraw limits.\\n    IWithdrawalValidator public immutable validator;\\n\\n    /// @notice Management fee earned proportion per second.\\n    /// @dev 10**18 is 100%\\n    uint256 public immutable managementFee;\\n\\n    /// STORAGE SLOT START ///\\n\\n    /// @notice Describes vault purpose and modelling assumptions for differentiating between vaults\\n    /// @dev string cannot be immutable bytecode but only set in constructor\\n    // slither-disable-next-line immutable-states\\n    string public description;\\n\\n    /// @notice Indicates that the Vault has been initialized\\n    bool public initialized;\\n\\n    /// @notice Indicates that the Vault has been finalized\\n    bool public finalized;\\n\\n    /// @notice Controls vault parameters.\\n    address public guardian;\\n\\n    /// @notice Pending account to accept ownership of vault.\\n    address public pendingOwner;\\n\\n    /// @notice Timestamp when notice elapses or 0 if not yet set\\n    uint256 public noticeTimeoutAt;\\n\\n    /// @notice Last timestamp where guardian fee index was locked.\\n    uint256 public lastFeeCheckpoint = type(uint256).max;\\n\\n    /// @notice Fee earned amount for each guardian\\n    mapping(address => uint256[]) public guardiansFee;\\n\\n    /// @notice Total guardian fee earned amount\\n    uint256[] public guardiansFeeTotal;\\n\\n    /// @notice Last timestamp where swap fee was updated.\\n    uint256 public lastSwapFeeCheckpoint;\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when the vault is created.\\n    /// @param factory Balancer Managed Pool factory address.\\n    /// @param name Name of Pool Token.\\n    /// @param symbol Symbol of Pool Token.\\n    /// @param tokens Token addresses.\\n    /// @param weights Token weights.\\n    /// @param swapFeePercentage Pool swap fee.\\n    /// @param guardian Vault guardian address.\\n    /// @param validator Withdrawal validator contract address.\\n    /// @param noticePeriod Notice period (in seconds).\\n    /// @param managementFee Management fee earned proportion per second.\\n    /// @param merkleOrchard Merkle Orchard address.\\n    /// @param description Vault description.\\n    event Created(\\n        address indexed factory,\\n        string name,\\n        string symbol,\\n        IERC20[] tokens,\\n        uint256[] weights,\\n        uint256 swapFeePercentage,\\n        address indexed guardian,\\n        address indexed validator,\\n        uint256 noticePeriod,\\n        uint256 managementFee,\\n        address merkleOrchard,\\n        string description\\n    );\\n\\n    /// @notice Emitted when tokens are deposited.\\n    /// @param requestedAmounts Requested amounts to deposit.\\n    /// @param amounts Deposited amounts.\\n    /// @param weights Token weights following deposit.\\n    event Deposit(\\n        uint256[] requestedAmounts,\\n        uint256[] amounts,\\n        uint256[] weights\\n    );\\n\\n    /// @notice Emitted when tokens are withdrawn.\\n    /// @param requestedAmounts Requested amounts to withdraw.\\n    /// @param amounts Withdrawn amounts.\\n    /// @param allowances Token withdrawal allowances.\\n    /// @param weights Token weights following withdrawal.\\n    event Withdraw(\\n        uint256[] requestedAmounts,\\n        uint256[] amounts,\\n        uint256[] allowances,\\n        uint256[] weights\\n    );\\n\\n    /// @notice Emitted when management fees are withdrawn.\\n    /// @param guardian Guardian address.\\n    /// @param amounts Withdrawn amounts.\\n    event DistributeGuardianFees(address indexed guardian, uint256[] amounts);\\n\\n    /// @notice Emitted when guardian is changed.\\n    /// @param previousGuardian Previous guardian address.\\n    /// @param guardian New guardian address.\\n    event GuardianChanged(\\n        address indexed previousGuardian,\\n        address indexed guardian\\n    );\\n\\n    /// @notice Emitted when updateWeightsGradually is called.\\n    /// @param startTime Start timestamp of updates.\\n    /// @param endTime End timestamp of updates.\\n    /// @param weights Target weights of tokens.\\n    event UpdateWeightsGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] weights\\n    );\\n\\n    /// @notice Emitted when cancelWeightUpdates is called.\\n    /// @param weights Current weights of tokens.\\n    event CancelWeightUpdates(uint256[] weights);\\n\\n    /// @notice Emitted when swap is enabled/disabled.\\n    /// @param swapEnabled New state of swap.\\n    event SetSwapEnabled(bool swapEnabled);\\n\\n    /// @notice Emitted when enableTradingWithWeights is called.\\n    /// @param time timestamp of updates.\\n    /// @param weights Target weights of tokens.\\n    event EnabledTradingWithWeights(uint256 time, uint256[] weights);\\n\\n    /// @notice Emitted when swap fee is updated.\\n    /// @param swapFee New swap fee.\\n    event SetSwapFee(uint256 swapFee);\\n\\n    /// @notice Emitted when initiateFinalization is called.\\n    /// @param noticeTimeoutAt Timestamp for notice timeout.\\n    event FinalizationInitiated(uint256 noticeTimeoutAt);\\n\\n    /// @notice Emitted when vault is finalized.\\n    /// @param caller Address of finalizer.\\n    /// @param amounts Returned token amounts.\\n    event Finalized(address indexed caller, uint256[] amounts);\\n\\n    /// @notice Emitted when transferOwnership is called.\\n    /// @param currentOwner Address of current owner.\\n    /// @param pendingOwner Address of pending owner.\\n    event OwnershipTransferOffered(\\n        address indexed currentOwner,\\n        address indexed pendingOwner\\n    );\\n\\n    /// @notice Emitted when cancelOwnershipTransfer is called.\\n    /// @param currentOwner Address of current owner.\\n    /// @param canceledOwner Address of canceled owner.\\n    event OwnershipTransferCanceled(\\n        address indexed currentOwner,\\n        address indexed canceledOwner\\n    );\\n\\n    /// ERRORS ///\\n\\n    error Aera__ValueLengthIsNotSame(uint256 numTokens, uint256 numValues);\\n    error Aera__DifferentTokensInPosition(\\n        address actual,\\n        address sortedToken,\\n        uint256 index\\n    );\\n    error Aera__ValidatorIsNotMatched(\\n        uint256 numTokens,\\n        uint256 numAllowances\\n    );\\n    error Aera__ValidatorIsNotValid(address validator);\\n    error Aera__ManagementFeeIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__NoticePeriodIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__NoticeTimeoutNotElapsed(uint256 noticeTimeoutAt);\\n    error Aera__GuardianIsZeroAddress();\\n    error Aera__GuardianIsOwner(address newGuardian);\\n    error Aera__CallerIsNotGuardian();\\n    error Aera__SwapFeePercentageChangeIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__DescriptionIsEmpty();\\n    error Aera__CallerIsNotOwnerOrGuardian();\\n    error Aera__WeightChangeEndBeforeStart();\\n    error Aera__WeightChangeStartTimeIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__WeightChangeEndTimeIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__WeightChangeDurationIsBelowMin(uint256 actual, uint256 min);\\n    error Aera__WeightChangeRatioIsAboveMax(\\n        address token,\\n        uint256 actual,\\n        uint256 max\\n    );\\n    error Aera__WeightIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__WeightIsBelowMin(uint256 actual, uint256 min);\\n    error Aera__AmountIsBelowMin(uint256 actual, uint256 min);\\n    error Aera__AmountExceedAvailable(\\n        address token,\\n        uint256 amount,\\n        uint256 available\\n    );\\n    error Aera__NoAvailableFeeForCaller(address caller);\\n    error Aera__BalanceChangedInCurrentBlock();\\n    error Aera__CannotSweepPoolToken();\\n    error Aera__PoolSwapIsAlreadyEnabled();\\n    error Aera__CannotSetSwapFeeBeforeCooldown();\\n    error Aera__FinalizationNotInitiated();\\n    error Aera__VaultNotInitialized();\\n    error Aera__VaultIsAlreadyInitialized();\\n    error Aera__VaultIsFinalizing();\\n    error Aera__VaultIsAlreadyFinalized();\\n    error Aera__VaultIsNotRenounceable();\\n    error Aera__OwnerIsZeroAddress();\\n    error Aera__NotPendingOwner();\\n    error Aera__NoPendingOwnershipTransfer();\\n\\n    /// MODIFIERS ///\\n\\n    /// @dev Throws if called by any account other than the guardian.\\n    modifier onlyGuardian() {\\n        if (msg.sender != guardian) {\\n            revert Aera__CallerIsNotGuardian();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or guardian.\\n    modifier onlyOwnerOrGuardian() {\\n        if (msg.sender != owner() && msg.sender != guardian) {\\n            revert Aera__CallerIsNotOwnerOrGuardian();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called before vault is initialized.\\n    modifier whenInitialized() {\\n        if (!initialized) {\\n            revert Aera__VaultNotInitialized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called before finalization is initiated.\\n    modifier whenNotFinalizing() {\\n        if (noticeTimeoutAt != 0) {\\n            revert Aera__VaultIsFinalizing();\\n        }\\n        _;\\n    }\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Initialize the contract by deploying new Balancer pool using the provided factory.\\n    /// @dev Tokens should be unique. Validator should conform to interface.\\n    ///      These are checked by Balancer in internal transactions:\\n    ///       If tokens are sorted in ascending order.\\n    ///       If swapFeePercentage is greater than minimum and less than maximum.\\n    ///       If total sum of weights is one.\\n    /// @param vaultParams Struct vault parameter.\\n    constructor(NewVaultParams memory vaultParams) {\\n        uint256 numTokens = vaultParams.tokens.length;\\n\\n        if (numTokens != vaultParams.weights.length) {\\n            revert Aera__ValueLengthIsNotSame(\\n                numTokens,\\n                vaultParams.weights.length\\n            );\\n        }\\n        if (\\n            !ERC165Checker.supportsInterface(\\n                vaultParams.validator,\\n                type(IWithdrawalValidator).interfaceId\\n            )\\n        ) {\\n            revert Aera__ValidatorIsNotValid(vaultParams.validator);\\n        }\\n        // Use new block to avoid stack too deep issue\\n        {\\n            uint256 numAllowances = IWithdrawalValidator(vaultParams.validator)\\n                .allowance()\\n                .length;\\n            if (numTokens != numAllowances) {\\n                revert Aera__ValidatorIsNotMatched(numTokens, numAllowances);\\n            }\\n        }\\n        if (vaultParams.managementFee > MAX_MANAGEMENT_FEE) {\\n            revert Aera__ManagementFeeIsAboveMax(\\n                vaultParams.managementFee,\\n                MAX_MANAGEMENT_FEE\\n            );\\n        }\\n        if (vaultParams.noticePeriod > MAX_NOTICE_PERIOD) {\\n            revert Aera__NoticePeriodIsAboveMax(\\n                vaultParams.noticePeriod,\\n                MAX_NOTICE_PERIOD\\n            );\\n        }\\n\\n        if (bytes(vaultParams.description).length == 0) {\\n            revert Aera__DescriptionIsEmpty();\\n        }\\n        checkGuardianAddress(vaultParams.guardian);\\n\\n        address[] memory assetManagers = new address[](numTokens);\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            assetManagers[i] = address(this);\\n        }\\n\\n        // Deploys a new ManagedPool from ManagedPoolFactory\\n        // create(\\n        //     ManagedPool.NewPoolParams memory poolParams,\\n        //     BasePoolController.BasePoolRights calldata basePoolRights,\\n        //     ManagedPoolController.ManagedPoolRights calldata managedPoolRights,\\n        //     uint256 minWeightChangeDuration,\\n        // )\\n        //\\n        // - poolParams.mustAllowlistLPs should be true to prevent other accounts\\n        //   to use joinPool\\n        // - minWeightChangeDuration should be zero so that weights can be updated immediately\\n        //   in deposit, withdraw, cancelWeightUpdates and enableTradingWithWeights.\\n        pool = IBManagedPool(\\n            IBManagedPoolFactory(vaultParams.factory).create(\\n                IBManagedPoolFactory.NewPoolParams({\\n                    vault: IBVault(address(0)),\\n                    name: vaultParams.name,\\n                    symbol: vaultParams.symbol,\\n                    tokens: vaultParams.tokens,\\n                    normalizedWeights: vaultParams.weights,\\n                    assetManagers: assetManagers,\\n                    swapFeePercentage: vaultParams.swapFeePercentage,\\n                    pauseWindowDuration: 0,\\n                    bufferPeriodDuration: 0,\\n                    owner: address(this),\\n                    swapEnabledOnStart: false,\\n                    mustAllowlistLPs: true,\\n                    managementSwapFeePercentage: 0\\n                }),\\n                IBManagedPoolFactory.BasePoolRights({\\n                    canTransferOwnership: false,\\n                    canChangeSwapFee: true,\\n                    canUpdateMetadata: false\\n                }),\\n                IBManagedPoolFactory.ManagedPoolRights({\\n                    canChangeWeights: true,\\n                    canDisableSwaps: true,\\n                    canSetMustAllowlistLPs: false,\\n                    canSetCircuitBreakers: false,\\n                    canChangeTokens: false\\n                }),\\n                0\\n            )\\n        );\\n\\n        // slither-disable-next-line reentrancy-benign\\n        bVault = pool.getVault();\\n        poolController = IBManagedPoolController(pool.getOwner());\\n        merkleOrchard = IBMerkleOrchard(vaultParams.merkleOrchard);\\n        poolId = pool.getPoolId();\\n        guardian = vaultParams.guardian;\\n        validator = IWithdrawalValidator(vaultParams.validator);\\n        noticePeriod = vaultParams.noticePeriod;\\n        description = vaultParams.description;\\n        managementFee = vaultParams.managementFee;\\n        guardiansFee[guardian] = new uint256[](numTokens);\\n        guardiansFeeTotal = new uint256[](numTokens);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit Created(\\n            vaultParams.factory,\\n            vaultParams.name,\\n            vaultParams.symbol,\\n            vaultParams.tokens,\\n            vaultParams.weights,\\n            vaultParams.swapFeePercentage,\\n            vaultParams.guardian,\\n            vaultParams.validator,\\n            vaultParams.noticePeriod,\\n            vaultParams.managementFee,\\n            vaultParams.merkleOrchard,\\n            vaultParams.description\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit GuardianChanged(UNSET_GUARDIAN_ADDRESS, vaultParams.guardian);\\n    }\\n\\n    /// PROTOCOL API ///\\n\\n    /// @inheritdoc IProtocolAPI\\n    function initialDeposit(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (initialized) {\\n            revert Aera__VaultIsAlreadyInitialized();\\n        }\\n\\n        initialized = true;\\n        lastFeeCheckpoint = block.timestamp;\\n\\n        IERC20[] memory tokens = getTokens();\\n        uint256 numTokens = tokens.length;\\n        uint256[] memory balances = new uint256[](numTokens);\\n        uint256[] memory amounts = getValuesFromTokenWithValues(\\n            tokenWithAmount,\\n            tokens\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            balances[i] = depositToken(tokens[i], amounts[i]);\\n        }\\n\\n        bytes memory initUserData = abi.encode(IBVault.JoinKind.INIT, amounts);\\n\\n        IBVault.JoinPoolRequest memory joinPoolRequest = IBVault\\n            .JoinPoolRequest({\\n                assets: tokens,\\n                maxAmountsIn: balances,\\n                userData: initUserData,\\n                fromInternalBalance: false\\n            });\\n        bVault.joinPool(poolId, address(this), address(this), joinPoolRequest);\\n\\n        setSwapEnabled(true);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function deposit(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        depositTokens(tokenWithAmount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // slither-disable-next-line incorrect-equality\\n    function depositIfBalanceUnchanged(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        (, , uint256 lastChangeBlock) = getTokensData();\\n\\n        if (lastChangeBlock == block.number) {\\n            revert Aera__BalanceChangedInCurrentBlock();\\n        }\\n\\n        depositTokens(tokenWithAmount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function withdraw(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        withdrawTokens(tokenWithAmount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // slither-disable-next-line incorrect-equality\\n    function withdrawIfBalanceUnchanged(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        (, , uint256 lastChangeBlock) = getTokensData();\\n\\n        if (lastChangeBlock == block.number) {\\n            revert Aera__BalanceChangedInCurrentBlock();\\n        }\\n\\n        withdrawTokens(tokenWithAmount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function initiateFinalization()\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        lockGuardianFees();\\n        // slither-disable-next-line reentrancy-no-eth\\n        noticeTimeoutAt = block.timestamp + noticePeriod;\\n        setSwapEnabled(false);\\n        emit FinalizationInitiated(noticeTimeoutAt);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // slither-disable-next-line timestamp\\n    function finalize()\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n    {\\n        if (finalized) {\\n            revert Aera__VaultIsAlreadyFinalized();\\n        }\\n        if (noticeTimeoutAt == 0) {\\n            revert Aera__FinalizationNotInitiated();\\n        }\\n        if (noticeTimeoutAt > block.timestamp) {\\n            revert Aera__NoticeTimeoutNotElapsed(noticeTimeoutAt);\\n        }\\n\\n        finalized = true;\\n\\n        uint256[] memory amounts = returnFunds();\\n        emit Finalized(owner(), amounts);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // slither-disable-next-line timestamp\\n    function setGuardian(address newGuardian)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n    {\\n        checkGuardianAddress(newGuardian);\\n\\n        if (initialized && noticeTimeoutAt == 0) {\\n            lockGuardianFees();\\n        }\\n\\n        if (guardiansFee[newGuardian].length == 0) {\\n            // slither-disable-next-line reentrancy-no-eth\\n            guardiansFee[newGuardian] = new uint256[](getTokens().length);\\n        }\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit GuardianChanged(guardian, newGuardian);\\n\\n        // slither-disable-next-line missing-zero-check\\n        guardian = newGuardian;\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // prettier-ignore\\n    function sweep(address token, uint256 amount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (token == address(pool)) {\\n            revert Aera__CannotSweepPoolToken();\\n        }\\n        IERC20(token).safeTransfer(owner(), amount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function enableTradingRiskingArbitrage()\\n        external\\n        override\\n        onlyOwner\\n        whenInitialized\\n    {\\n        setSwapEnabled(true);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function enableTradingWithWeights(TokenValue[] calldata tokenWithWeight)\\n        external\\n        override\\n        onlyOwner\\n        whenInitialized\\n    {\\n        if (pool.getSwapEnabled()) {\\n            revert Aera__PoolSwapIsAlreadyEnabled();\\n        }\\n\\n        IERC20[] memory tokens = getTokens();\\n\\n        uint256[] memory weights = getValuesFromTokenWithValues(\\n            tokenWithWeight,\\n            tokens\\n        );\\n\\n        poolController.updateWeightsGradually(\\n            block.timestamp,\\n            block.timestamp,\\n            weights\\n        );\\n        poolController.setSwapEnabled(true);\\n        // slither-disable-next-line reentrancy-events\\n        emit EnabledTradingWithWeights(block.timestamp, weights);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function disableTrading()\\n        external\\n        override\\n        onlyOwnerOrGuardian\\n        whenInitialized\\n    {\\n        setSwapEnabled(false);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // prettier-ignore\\n    function claimRewards(\\n        IBMerkleOrchard.Claim[] calldata claims,\\n        IERC20[] calldata tokens\\n    )\\n        external\\n        override\\n        onlyOwner\\n        whenInitialized\\n    {\\n        merkleOrchard.claimDistributions(owner(), claims, tokens);\\n    }\\n\\n    /// GUARDIAN API ///\\n\\n    /// @inheritdoc IGuardianAPI\\n    // slither-disable-next-line timestamp\\n    function updateWeightsGradually(\\n        TokenValue[] calldata tokenWithWeight,\\n        uint256 startTime,\\n        uint256 endTime\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyGuardian\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        // These are to protect against the following vulnerability\\n        // https://forum.balancer.fi/t/vulnerability-disclosure/3179\\n        if (startTime > type(uint32).max) {\\n            revert Aera__WeightChangeStartTimeIsAboveMax(\\n                startTime,\\n                type(uint32).max\\n            );\\n        }\\n        if (endTime > type(uint32).max) {\\n            revert Aera__WeightChangeEndTimeIsAboveMax(\\n                endTime,\\n                type(uint32).max\\n            );\\n        }\\n\\n        startTime = Math.max(block.timestamp, startTime);\\n        if (startTime > endTime) {\\n            revert Aera__WeightChangeEndBeforeStart();\\n        }\\n        if (startTime + MINIMUM_WEIGHT_CHANGE_DURATION > endTime) {\\n            revert Aera__WeightChangeDurationIsBelowMin(\\n                endTime - startTime,\\n                MINIMUM_WEIGHT_CHANGE_DURATION\\n            );\\n        }\\n\\n        // Check if weight change ratio is exceeded\\n        uint256[] memory weights = pool.getNormalizedWeights();\\n        IERC20[] memory tokens = getTokens();\\n        uint256 numTokens = tokens.length;\\n        uint256[] memory targetWeights = getValuesFromTokenWithValues(\\n            tokenWithWeight,\\n            tokens\\n        );\\n        uint256 duration = endTime - startTime;\\n        uint256 maximumRatio = MAX_WEIGHT_CHANGE_RATIO * duration;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 changeRatio = getWeightChangeRatio(\\n                weights[i],\\n                targetWeights[i]\\n            );\\n\\n            if (changeRatio > maximumRatio) {\\n                revert Aera__WeightChangeRatioIsAboveMax(\\n                    address(tokens[i]),\\n                    changeRatio,\\n                    maximumRatio\\n                );\\n            }\\n        }\\n\\n        poolController.updateWeightsGradually(\\n            startTime,\\n            endTime,\\n            targetWeights\\n        );\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit UpdateWeightsGradually(startTime, endTime, targetWeights);\\n    }\\n\\n    /// @inheritdoc IGuardianAPI\\n    function cancelWeightUpdates()\\n        external\\n        override\\n        nonReentrant\\n        onlyGuardian\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        uint256[] memory weights = pool.getNormalizedWeights();\\n        uint256 numWeights = weights.length;\\n        uint256 weightSum;\\n\\n        for (uint256 i = 0; i < numWeights; i++) {\\n            weightSum += weights[i];\\n        }\\n\\n        updateWeights(weights, weightSum);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit CancelWeightUpdates(weights);\\n    }\\n\\n    /// @inheritdoc IGuardianAPI\\n    // slither-disable-next-line timestamp\\n    function setSwapFee(uint256 newSwapFee)\\n        external\\n        override\\n        nonReentrant\\n        onlyGuardian\\n    {\\n        if (\\n            block.timestamp < lastSwapFeeCheckpoint + SWAP_FEE_COOLDOWN_PERIOD\\n        ) {\\n            revert Aera__CannotSetSwapFeeBeforeCooldown();\\n        }\\n        lastSwapFeeCheckpoint = block.timestamp;\\n\\n        uint256 oldSwapFee = pool.getSwapFeePercentage();\\n\\n        uint256 absoluteDelta = (newSwapFee > oldSwapFee)\\n            ? newSwapFee - oldSwapFee\\n            : oldSwapFee - newSwapFee;\\n        if (absoluteDelta > MAXIMUM_SWAP_FEE_PERCENT_CHANGE) {\\n            revert Aera__SwapFeePercentageChangeIsAboveMax(\\n                absoluteDelta,\\n                MAXIMUM_SWAP_FEE_PERCENT_CHANGE\\n            );\\n        }\\n\\n        poolController.setSwapFeePercentage(newSwapFee);\\n        // slither-disable-next-line reentrancy-events\\n        emit SetSwapFee(newSwapFee);\\n    }\\n\\n    /// @inheritdoc IGuardianAPI\\n    function claimGuardianFees()\\n        external\\n        override\\n        nonReentrant\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        if (msg.sender == guardian) {\\n            lockGuardianFees();\\n        }\\n\\n        if (guardiansFee[msg.sender].length == 0) {\\n            revert Aera__NoAvailableFeeForCaller(msg.sender);\\n        }\\n\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n\\n        uint256 numTokens = tokens.length;\\n        uint256[] memory fees = guardiansFee[msg.sender];\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            // slither-disable-next-line reentrancy-no-eth\\n            guardiansFeeTotal[i] -= fees[i];\\n            guardiansFee[msg.sender][i] = 0;\\n            tokens[i].safeTransfer(msg.sender, fees[i]);\\n        }\\n\\n        // slither-disable-next-line reentrancy-no-eth\\n        if (msg.sender != guardian) {\\n            delete guardiansFee[msg.sender];\\n        }\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit DistributeGuardianFees(msg.sender, fees);\\n    }\\n\\n    /// MULTI ASSET VAULT INTERFACE ///\\n\\n    /// @inheritdoc IMultiAssetVault\\n    function holding(uint256 index) external view override returns (uint256) {\\n        uint256[] memory amounts = getHoldings();\\n        return amounts[index];\\n    }\\n\\n    /// @inheritdoc IMultiAssetVault\\n    function getHoldings()\\n        public\\n        view\\n        override\\n        returns (uint256[] memory amounts)\\n    {\\n        (, amounts, ) = getTokensData();\\n    }\\n\\n    /// USER API ///\\n\\n    /// @inheritdoc IUserAPI\\n    // prettier-ignore\\n    function isSwapEnabled()\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return pool.getSwapEnabled();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    // prettier-ignore\\n    function getSwapFee()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return pool.getSwapFeePercentage();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getTokensData()\\n        public\\n        view\\n        override\\n        returns (\\n            IERC20[] memory,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        return bVault.getPoolTokens(poolId);\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getTokens()\\n        public\\n        view\\n        override\\n        returns (IERC20[] memory tokens)\\n    {\\n        (tokens, , ) = getTokensData();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getNormalizedWeights()\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return pool.getNormalizedWeights();\\n    }\\n\\n    /// @notice Disable ownership renounceable\\n    function renounceOwnership() public override onlyOwner {\\n        revert Aera__VaultIsNotRenounceable();\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function transferOwnership(address newOwner)\\n        public\\n        override(IProtocolAPI, Ownable)\\n        onlyOwner\\n    {\\n        if (newOwner == address(0)) {\\n            revert Aera__OwnerIsZeroAddress();\\n        }\\n        pendingOwner = newOwner;\\n        emit OwnershipTransferOffered(owner(), newOwner);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function cancelOwnershipTransfer() external override onlyOwner {\\n        if (pendingOwner == address(0)) {\\n            revert Aera__NoPendingOwnershipTransfer();\\n        }\\n        emit OwnershipTransferCanceled(owner(), pendingOwner);\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function acceptOwnership() external override {\\n        if (msg.sender != pendingOwner) {\\n            revert Aera__NotPendingOwner();\\n        }\\n        _transferOwnership(pendingOwner);\\n        pendingOwner = address(0);\\n    }\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Deposit amount of tokens.\\n    /// @dev Will only be called by deposit() and depositIfBalanceUnchanged()\\n    ///      It calls updateWeights() function which cancels\\n    ///      current active weights change schedule.\\n    /// @param tokenWithAmount Deposit tokens with amount.\\n    function depositTokens(TokenValue[] calldata tokenWithAmount) internal {\\n        lockGuardianFees();\\n\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n        uint256 numTokens = tokens.length;\\n\\n        uint256[] memory weights = pool.getNormalizedWeights();\\n        uint256[] memory newBalances = new uint256[](numTokens);\\n        uint256[] memory amounts = getValuesFromTokenWithValues(\\n            tokenWithAmount,\\n            tokens\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (amounts[i] != 0) {\\n                newBalances[i] = depositToken(tokens[i], amounts[i]);\\n            }\\n        }\\n\\n        /// Set managed balance of pool as amounts\\n        /// i.e. Deposit amounts of tokens to pool from Aera Vault\\n        updatePoolBalance(newBalances, IBVault.PoolBalanceOpKind.UPDATE);\\n        /// Decrease managed balance and increase cash balance of pool\\n        /// i.e. Move amounts from managed balance to cash balance\\n        updatePoolBalance(newBalances, IBVault.PoolBalanceOpKind.DEPOSIT);\\n\\n        uint256[] memory newHoldings = getHoldings();\\n        uint256 weightSum;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (amounts[i] != 0) {\\n                weights[i] = (weights[i] * newHoldings[i]) / holdings[i];\\n                newBalances[i] = newHoldings[i] - holdings[i];\\n            }\\n\\n            weightSum += weights[i];\\n        }\\n\\n        /// It cancels current active weights change schedule\\n        /// and update weights with newWeights\\n        updateWeights(weights, weightSum);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit Deposit(amounts, newBalances, pool.getNormalizedWeights());\\n    }\\n\\n    /// @notice Withdraw tokens up to requested amounts.\\n    /// @dev Will only be called by withdraw() and withdrawIfBalanceUnchanged()\\n    ///      It calls updateWeights() function which cancels\\n    ///      current active weights change schedule.\\n    /// @param tokenWithAmount Requested tokens with amount.\\n    function withdrawTokens(TokenValue[] calldata tokenWithAmount) internal {\\n        lockGuardianFees();\\n\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n        uint256 numTokens = tokens.length;\\n\\n        uint256[] memory allowances = validator.allowance();\\n        uint256[] memory weights = pool.getNormalizedWeights();\\n        uint256[] memory balances = new uint256[](numTokens);\\n        uint256[] memory amounts = getValuesFromTokenWithValues(\\n            tokenWithAmount,\\n            tokens\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (amounts[i] > holdings[i] || amounts[i] > allowances[i]) {\\n                revert Aera__AmountExceedAvailable(\\n                    address(tokens[i]),\\n                    amounts[i],\\n                    Math.min(holdings[i], allowances[i])\\n                );\\n            }\\n\\n            if (amounts[i] != 0) {\\n                balances[i] = tokens[i].balanceOf(address(this));\\n            }\\n        }\\n\\n        withdrawFromPool(amounts);\\n\\n        uint256 weightSum;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (amounts[i] != 0) {\\n                balances[i] = tokens[i].balanceOf(address(this)) - balances[i];\\n                tokens[i].safeTransfer(owner(), balances[i]);\\n\\n                uint256 newBalance = holdings[i] - amounts[i];\\n                weights[i] = (weights[i] * newBalance) / holdings[i];\\n            }\\n\\n            weightSum += weights[i];\\n        }\\n\\n        /// It cancels current active weights change schedule\\n        /// and update weights with newWeights\\n        updateWeights(weights, weightSum);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit Withdraw(\\n            amounts,\\n            balances,\\n            allowances,\\n            pool.getNormalizedWeights()\\n        );\\n    }\\n\\n    /// @notice Withdraw tokens from Balancer Pool to Aera Vault\\n    /// @dev Will only be called by withdrawTokens(), returnFunds()\\n    ///      and lockGuardianFees()\\n    function withdrawFromPool(uint256[] memory amounts) internal {\\n        uint256[] memory managed = new uint256[](amounts.length);\\n\\n        /// Decrease cash balance and increase managed balance of pool\\n        /// i.e. Move amounts from cash balance to managed balance\\n        /// and withdraw token amounts from pool to Aera Vault\\n        updatePoolBalance(amounts, IBVault.PoolBalanceOpKind.WITHDRAW);\\n        /// Adjust managed balance of pool as the zero array\\n        updatePoolBalance(managed, IBVault.PoolBalanceOpKind.UPDATE);\\n    }\\n\\n    /// @notice Calculate guardian fees and lock the tokens in Vault.\\n    /// @dev Will only be called by claimGuardianFees(), setGuardian(),\\n    ///      initiateFinalization(), deposit() and withdraw().\\n    // slither-disable-next-line timestamp\\n    function lockGuardianFees() internal {\\n        if (managementFee == 0) {\\n            return;\\n        }\\n        if (block.timestamp <= lastFeeCheckpoint) {\\n            return;\\n        }\\n\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n\\n        uint256 numTokens = tokens.length;\\n        uint256[] memory newFees = new uint256[](numTokens);\\n        uint256[] memory balances = new uint256[](numTokens);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            balances[i] = tokens[i].balanceOf(address(this));\\n            newFees[i] =\\n                (holdings[i] *\\n                    (block.timestamp - lastFeeCheckpoint) *\\n                    managementFee) /\\n                ONE;\\n        }\\n\\n        lastFeeCheckpoint = block.timestamp;\\n\\n        withdrawFromPool(newFees);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            newFees[i] = tokens[i].balanceOf(address(this)) - balances[i];\\n            // slither-disable-next-line reentrancy-benign\\n            guardiansFee[guardian][i] += newFees[i];\\n            guardiansFeeTotal[i] += newFees[i];\\n        }\\n    }\\n\\n    /// @notice Calculate change ratio for weight upgrade.\\n    /// @dev Will only be called by updateWeightsGradually().\\n    /// @param weight Current weight.\\n    /// @param targetWeight Target weight.\\n    /// @return Change ratio(>1) from current weight to target weight.\\n    function getWeightChangeRatio(uint256 weight, uint256 targetWeight)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            weight > targetWeight\\n                ? (ONE * weight) / targetWeight\\n                : (ONE * targetWeight) / weight;\\n    }\\n\\n    /// @notice Return an array of values from given tokenWithValues.\\n    /// @dev Will only be called by enableTradingWithWeights(), updateWeightsGradually().\\n    ///      initialDeposit(), depositTokens() and withdrawTokens().\\n    ///      The values could be amounts or weights.\\n    /// @param tokenWithValues Tokens with values.\\n    /// @param tokens Array of pool tokens.\\n    /// @return Array of values.\\n    function getValuesFromTokenWithValues(\\n        TokenValue[] calldata tokenWithValues,\\n        IERC20[] memory tokens\\n    ) internal pure returns (uint256[] memory) {\\n        uint256 numTokens = tokens.length;\\n\\n        if (numTokens != tokenWithValues.length) {\\n            revert Aera__ValueLengthIsNotSame(\\n                numTokens,\\n                tokenWithValues.length\\n            );\\n        }\\n\\n        uint256[] memory values = new uint256[](numTokens);\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (address(tokenWithValues[i].token) != address(tokens[i])) {\\n                revert Aera__DifferentTokensInPosition(\\n                    address(tokenWithValues[i].token),\\n                    address(tokens[i]),\\n                    i\\n                );\\n            }\\n            values[i] = tokenWithValues[i].value;\\n        }\\n\\n        return values;\\n    }\\n\\n    /// @dev PoolBalanceOpKind has three kinds\\n    /// Withdrawal - decrease the Pool's cash, but increase its managed balance,\\n    ///              leaving the total balance unchanged.\\n    /// Deposit - increase the Pool's cash, but decrease its managed balance,\\n    ///           leaving the total balance unchanged.\\n    /// Update - don't affect the Pool's cash balance, but change the managed balance,\\n    ///          so it does alter the total. The external amount can be either\\n    ///          increased or decreased by this call (i.e., reporting a gain or a loss).\\n    function updatePoolBalance(\\n        uint256[] memory amounts,\\n        IBVault.PoolBalanceOpKind kind\\n    ) internal {\\n        uint256 numAmounts = amounts.length;\\n        IBVault.PoolBalanceOp[] memory ops = new IBVault.PoolBalanceOp[](\\n            numAmounts\\n        );\\n        IERC20[] memory tokens = getTokens();\\n\\n        bytes32 balancerPoolId = poolId;\\n        for (uint256 i = 0; i < numAmounts; i++) {\\n            ops[i].kind = kind;\\n            ops[i].poolId = balancerPoolId;\\n            ops[i].token = tokens[i];\\n            ops[i].amount = amounts[i];\\n        }\\n\\n        bVault.managePoolBalance(ops);\\n    }\\n\\n    /// @notice Update weights of tokens in the pool.\\n    /// @dev Will only be called by deposit(), withdraw() and cancelWeightUpdates().\\n    function updateWeights(uint256[] memory weights, uint256 weightSum)\\n        internal\\n    {\\n        uint256 numWeights = weights.length;\\n        uint256[] memory newWeights = new uint256[](numWeights);\\n\\n        uint256 adjustedSum;\\n        for (uint256 i = 0; i < numWeights; i++) {\\n            newWeights[i] = (weights[i] * ONE) / weightSum;\\n            adjustedSum += newWeights[i];\\n        }\\n\\n        newWeights[0] = newWeights[0] + ONE - adjustedSum;\\n\\n        poolController.updateWeightsGradually(\\n            block.timestamp,\\n            block.timestamp,\\n            newWeights\\n        );\\n    }\\n\\n    /// @notice Deposit token to the pool.\\n    /// @dev Will only be called by deposit().\\n    /// @param token Address of the token to deposit.\\n    /// @param amount Amount to deposit.\\n    /// @return Actual deposited amount excluding fee on transfer.\\n    // slither-disable-next-line timestamp\\n    function depositToken(IERC20 token, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        // slither-disable-next-line calls-loop\\n        uint256 balance = token.balanceOf(address(this));\\n        token.safeTransferFrom(owner(), address(this), amount);\\n        // slither-disable-next-line calls-loop\\n        balance = token.balanceOf(address(this)) - balance;\\n\\n        // slither-disable-next-line calls-loop\\n        uint256 allowance = token.allowance(address(this), address(bVault));\\n        if (allowance > 0) {\\n            token.safeDecreaseAllowance(address(bVault), allowance);\\n        }\\n        token.safeIncreaseAllowance(address(bVault), balance);\\n\\n        return balance;\\n    }\\n\\n    /// @notice Return all funds to owner.\\n    /// @dev Will only be called by finalize().\\n    /// @return amounts Exact returned amount of tokens.\\n    function returnFunds() internal returns (uint256[] memory amounts) {\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n\\n        uint256 numTokens = tokens.length;\\n        amounts = new uint256[](numTokens);\\n\\n        withdrawFromPool(holdings);\\n\\n        uint256 amount;\\n        IERC20 token;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            token = tokens[i];\\n            amount = token.balanceOf(address(this)) - guardiansFeeTotal[i];\\n            token.safeTransfer(owner(), amount);\\n            amounts[i] = amount;\\n        }\\n    }\\n\\n    /// @notice Enable or disable swap.\\n    /// @dev Will only be called by enableTradingRiskingArbitrage(), enableTradingWithWeights()\\n    ///      and disableTrading().\\n    /// @param swapEnabled Swap status.\\n    function setSwapEnabled(bool swapEnabled) internal {\\n        poolController.setSwapEnabled(swapEnabled);\\n        // slither-disable-next-line reentrancy-events\\n        emit SetSwapEnabled(swapEnabled);\\n    }\\n\\n    /// @notice Check if the address can be a guardian.\\n    /// @dev Will only be called by constructor and setGuardian()\\n    /// @param newGuardian Address to check.\\n    function checkGuardianAddress(address newGuardian) internal {\\n        if (newGuardian == address(0)) {\\n            revert Aera__GuardianIsZeroAddress();\\n        }\\n        if (newGuardian == owner()) {\\n            revert Aera__GuardianIsOwner(newGuardian);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9d3e64277b8902f97440f8a626dcb8e723093b1449e97b47d22cbf6afa869e8\",\"license\":\"UNLICENSED\"},\"contracts/v1/dependencies/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/v1/dependencies/openzeppelin/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/v1/dependencies/openzeppelin/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"contracts/v1/dependencies/openzeppelin/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/v1/dependencies/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/v1/dependencies/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x768fcac57789d8edb0b4c8e02bad17b15faeebbc3c8b2c8ec473b485cc0b59fe\",\"license\":\"MIT\"},\"contracts/v1/dependencies/openzeppelin/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfc688f3896433e8e6cd736ebd0dd9835c448650581b2cd407036f4eb03e9f53a\",\"license\":\"MIT\"},\"contracts/v1/dependencies/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"contracts/v1/dependencies/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad3e6395aa3372beae2307b88d9d379d8c4a99b1f799dcac06ca1a8a27f9ac30\",\"license\":\"MIT\"},\"contracts/v1/interfaces/IAeraVaultV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"./IUserAPI.sol\\\";\\nimport \\\"./IGuardianAPI.sol\\\";\\nimport \\\"./IProtocolAPI.sol\\\";\\nimport \\\"./IMultiAssetVault.sol\\\";\\n\\n/// @title Interface for v1 vault.\\n// solhint-disable-next-line no-empty-blocks\\ninterface IAeraVaultV1 is\\n    IUserAPI,\\n    IGuardianAPI,\\n    IProtocolAPI,\\n    IMultiAssetVault\\n{\\n    // Use struct parameter to avoid stack too deep error.\\n    // factory: Balancer Managed Pool Factory address.\\n    // name: Name of Pool Token.\\n    // symbol: Symbol of Pool Token.\\n    // tokens: Token addresses.\\n    // weights: Token weights.\\n    // swapFeePercentage: Pool swap fee.\\n    // guardian: Vault guardian address.\\n    // validator: Withdrawal validator contract address.\\n    // noticePeriod: Notice period (in seconds).\\n    // managementFee: Management fee earned proportion per second.\\n    // merkleOrchard: Balancer Merkle Orchard address.\\n    // description: Simple vault text description.\\n    struct NewVaultParams {\\n        address factory;\\n        string name;\\n        string symbol;\\n        IERC20[] tokens;\\n        uint256[] weights;\\n        uint256 swapFeePercentage;\\n        address guardian;\\n        address validator;\\n        uint32 noticePeriod;\\n        uint256 managementFee;\\n        address merkleOrchard;\\n        string description;\\n    }\\n}\\n\",\"keccak256\":\"0x93dd92c59cf17ac00316a048219faf758473c60295727b25d62cc680365bce70\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IBManagedPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./IBVault.sol\\\";\\n\\ninterface IBManagedPool {\\n    function getSwapEnabled() external view returns (bool);\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getVault() external view returns (IBVault);\\n\\n    function getOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4950c5171e0243da314b979fbf78e9fa2e5c7d3afb278362677b6caaffda1d85\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IBManagedPoolController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.11;\\n\\ninterface IBManagedPoolController {\\n    function updateWeightsGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] memory endWeights\\n    ) external;\\n\\n    function setSwapEnabled(bool swapEnabled) external;\\n\\n    function setSwapFeePercentage(uint256 swapFeePercentage) external;\\n}\\n\",\"keccak256\":\"0x1fba2700dd04fd971792edd295c5f42c7a226604a256b7ce228e48b3a0778662\",\"license\":\"GPL-3.0-or-later\"},\"contracts/v1/interfaces/IBManagedPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./IBVault.sol\\\";\\n\\ninterface IBManagedPoolFactory {\\n    struct NewPoolParams {\\n        IBVault vault;\\n        string name;\\n        string symbol;\\n        IERC20[] tokens;\\n        uint256[] normalizedWeights;\\n        address[] assetManagers;\\n        uint256 swapFeePercentage;\\n        uint256 pauseWindowDuration;\\n        uint256 bufferPeriodDuration;\\n        address owner;\\n        bool swapEnabledOnStart;\\n        bool mustAllowlistLPs;\\n        uint256 managementSwapFeePercentage;\\n    }\\n\\n    struct BasePoolRights {\\n        bool canTransferOwnership;\\n        bool canChangeSwapFee;\\n        bool canUpdateMetadata;\\n    }\\n\\n    struct ManagedPoolRights {\\n        bool canChangeWeights;\\n        bool canDisableSwaps;\\n        bool canSetMustAllowlistLPs;\\n        bool canSetCircuitBreakers;\\n        bool canChangeTokens;\\n    }\\n\\n    function create(\\n        NewPoolParams memory poolParams,\\n        BasePoolRights memory basePoolRights,\\n        ManagedPoolRights memory managedPoolRights,\\n        uint256 minWeightChangeDuration\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xb9cff620095c86b8e1589cc1b363dafd26d79825984f52a77f802348155900bb\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IBMerkleOrchard.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\n\\ninterface IBMerkleOrchard {\\n    struct Claim {\\n        uint256 distributionId;\\n        uint256 balance;\\n        address distributor;\\n        uint256 tokenIndex;\\n        bytes32[] merkleProof;\\n    }\\n\\n    function claimDistributions(\\n        address claimer,\\n        Claim[] memory claims,\\n        IERC20[] memory tokens\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8a7b4bfc0a0b7e2ec2d34f9660b9e39e89f39ec3dd63d24554c69ceb4272c6c2\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IBVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\n\\ninterface IBVault {\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n    }\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IERC20[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IERC20[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    enum PoolBalanceChangeKind {\\n        JOIN,\\n        EXIT\\n    }\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IERC20 assetIn;\\n        IERC20 assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IERC20[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    enum PoolBalanceOpKind {\\n        WITHDRAW,\\n        DEPOSIT,\\n        UPDATE\\n    }\\n\\n    function setPaused(bool paused) external;\\n}\\n\",\"keccak256\":\"0xc97f96f1aa34986884a588ec8961ac43f419714cce4df81ff30c9cc0c0cdc42d\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IGuardianAPI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./IProtocolAPI.sol\\\";\\n\\n/// @title Interface for vault guardian.\\n/// @notice Supports parameter submission.\\ninterface IGuardianAPI {\\n    /// @notice Initiate weight move to target in given update window.\\n    /// @dev These are checked by Balancer in internal transactions:\\n    ///       If target weight length and token length match.\\n    ///       If total sum of target weights is one.\\n    ///       If target weight is greater than minimum.\\n    /// @param tokenWithWeight Tokens with target weights.\\n    /// @param startTime Timestamp at which weight movement should start.\\n    /// @param endTime Timestamp at which the weights should reach target values.\\n    function updateWeightsGradually(\\n        IProtocolAPI.TokenValue[] memory tokenWithWeight,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external;\\n\\n    /// @notice Cancel the active weight update schedule.\\n    /// @dev Keep calculated weights from the schedule at the time.\\n    function cancelWeightUpdates() external;\\n\\n    /// @notice Change swap fee.\\n    /// @dev These are checked by Balancer in internal transactions:\\n    ///       If new swap fee is less than maximum.\\n    ///       If new swap fee is greater than minimum.\\n    function setSwapFee(uint256 newSwapFee) external;\\n\\n    /// @notice Claim guardian fee.\\n    /// @dev This function shouldn't be called too frequently.\\n    function claimGuardianFees() external;\\n\\n    /* This function is defined in IProtocolAPI.sol\\n    /// @notice Disable swap.\\n    function disableTrading() external;\\n    */\\n}\\n\",\"keccak256\":\"0x38860e598d3e8968a9a6859fca011fc026712243f7a3d8ded7441d98c07cc17c\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IMultiAssetVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n/// @title Multi-asset vault interface.\\ninterface IMultiAssetVault {\\n    /// @notice Balance of token with given index.\\n    /// @return Token balance in underlying pool.\\n    function holding(uint256 index) external view returns (uint256);\\n\\n    /// @notice Underlying token balances.\\n    /// @return Token balances in underlying pool\\n    function getHoldings() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x86a507569d23f915e02286b453bb5a0b8bd75cac546254fae3af21647867589e\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IProtocolAPI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBMerkleOrchard.sol\\\";\\n\\n/// @title Interface for protocol that owns treasury.\\ninterface IProtocolAPI {\\n    // Use struct parameter to prevent human error.\\n    // token: Token address.\\n    // value: Amount of weight of token.\\n    struct TokenValue {\\n        IERC20 token;\\n        uint256 value;\\n    }\\n\\n    /// @notice Initialize Vault with first deposit.\\n    /// @dev Initial deposit must be performed before\\n    ///      calling withdraw() or deposit() functions.\\n    ///      It enables trading, so weights and balances should be in line\\n    ///      with market spot prices, otherwise there is a significant risk\\n    ///      of arbitrage.\\n    ///      This is checked by Balancer in internal transactions:\\n    ///       If token amount is not zero when join pool.\\n    /// @param tokenWithAmount Deposit tokens with amount.\\n    function initialDeposit(TokenValue[] memory tokenWithAmount) external;\\n\\n    /// @notice Deposit tokens into vault.\\n    /// @dev It calls updateWeights() function\\n    ///      which cancels current active weights change schedule.\\n    /// @param tokenWithAmount Deposit tokens with amount.\\n    function deposit(TokenValue[] memory tokenWithAmount) external;\\n\\n    /// @notice Deposit tokens into vault.\\n    /// @dev It calls updateWeights() function\\n    ///      which cancels current active weights change schedule.\\n    ///      It reverts if balances were updated in the current block.\\n    /// @param tokenWithAmount Deposit token with amount.\\n    function depositIfBalanceUnchanged(TokenValue[] memory tokenWithAmount)\\n        external;\\n\\n    /// @notice Withdraw tokens up to requested amounts.\\n    /// @dev It calls updateWeights() function\\n    ///      which cancels current active weights change schedule.\\n    /// @param tokenWithAmount Requested tokens with amount.\\n    function withdraw(TokenValue[] memory tokenWithAmount) external;\\n\\n    /// @notice Withdraw tokens up to requested amounts.\\n    /// @dev It calls updateWeights() function\\n    ///      which cancels current active weights change schedule.\\n    ///      It reverts if balances were updated in the current block.\\n    /// @param tokenWithAmount Requested tokens with amount.\\n    function withdrawIfBalanceUnchanged(TokenValue[] memory tokenWithAmount)\\n        external;\\n\\n    /// @notice Initiate vault destruction and return all funds to treasury owner.\\n    function initiateFinalization() external;\\n\\n    /// @notice Destroy vault and returns all funds to treasury owner.\\n    function finalize() external;\\n\\n    /// @notice Change guardian.\\n    function setGuardian(address newGuardian) external;\\n\\n    /// @notice Withdraw any tokens accidentally sent to vault.\\n    function sweep(address token, uint256 amount) external;\\n\\n    /// @notice Enable swap with current weights.\\n    function enableTradingRiskingArbitrage() external;\\n\\n    /// @notice Enable swap with updating weights.\\n    /// @dev These are checked by Balancer in internal transactions:\\n    ///       If weight length and token length match.\\n    ///       If total sum of weights is one.\\n    ///       If weight is greater than minimum.\\n    /// @param tokenWithWeight Tokens with new weights.\\n    function enableTradingWithWeights(TokenValue[] memory tokenWithWeight)\\n        external;\\n\\n    /// @notice Disable swap.\\n    function disableTrading() external;\\n\\n    /// @notice Claim Balancer rewards.\\n    /// @dev It calls claimDistributions() function of Balancer MerkleOrchard.\\n    ///      Once this function is called, the tokens will be transferred to\\n    ///      the Vault and it can be distributed via sweep function.\\n    /// @param claims An array of claims provided as a claim struct.\\n    ///        See https://docs.balancer.fi/products/merkle-orchard/claiming-tokens#claiming-from-the-contract-directly.\\n    /// @param tokens An array consisting of tokens to be claimed.\\n    function claimRewards(\\n        IBMerkleOrchard.Claim[] memory claims,\\n        IERC20[] memory tokens\\n    ) external;\\n\\n    /// @notice Offer ownership to another address\\n    /// @dev It disables immediate transfer of ownership\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Cancel current pending ownership transfer\\n    function cancelOwnershipTransfer() external;\\n}\\n\",\"keccak256\":\"0x5db889144520606d122d60048e4b1e96a92af4c423de87c953776dc0f11cd10b\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IUserAPI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\n\\n/// @title Vault public interface.\\n/// @notice Interface for vault arbitrageurs and other observers.\\ninterface IUserAPI {\\n    /// @notice Check if vault trading is enabled.\\n    /// @return If public swap is turned on, returns true, otherwise false.\\n    function isSwapEnabled() external view returns (bool);\\n\\n    /// @notice Get swap fee.\\n    /// @return Swap fee from underlying Balancer pool.\\n    function getSwapFee() external view returns (uint256);\\n\\n    /// @notice Get Pool ID.\\n    /// @return Pool ID of Balancer pool on Vault.\\n    function poolId() external view returns (bytes32);\\n\\n    /// @notice Get Token Data of Balancer Pool.\\n    /// @return tokens IERC20 tokens of Balancer pool.\\n    /// @return balances Balances of tokens of Balancer pool.\\n    /// @return lastChangeBlock Last updated Blocknumber.\\n    function getTokensData()\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /// @notice Get IERC20 Tokens Balancer Pool.\\n    /// @return tokens IERC20 tokens of Balancer pool.\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    /// @notice Get token weights.\\n    /// @return Normalized weights of tokens on Balancer pool.\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    /// @notice Accept ownership\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x66fa078f6d220701920e93286359df87a269d0e6ab87aba68c18474e50df2bc5\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IWithdrawalValidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n/// @title Withdrawal validation logic.\\n/// @notice Represents the withdrawal conditions for a vault.\\n/// @dev Should be extended by vault owner or guardian, deployed and attached\\n///      to a vault instance. Withdrawal validator needs to respond to\\n///      shortfall conditions and provide an accurate allowance.\\ninterface IWithdrawalValidator {\\n    /// @notice Determine how much of each token could be withdrawn under\\n    ///         current conditions.\\n    /// @return token0Amount, token1Amount The quantity of each token that\\n    ///         can be withdrawn from the vault.\\n    /// @dev Token quantity value should be interpreted with the same\\n    ///      decimals as the token ERC20 balance.\\n    function allowance() external returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xeee38919297f84e11b943c6dc4163d9c5a179f12b909a95c65955ecf5924d547\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101806040526000196006553480156200001857600080fd5b5060405162006659380380620066598339810160408190526200003b9162000ce6565b620000463362000799565b600180556060810151516080820151518114620000915760808201515160405163ba34664360e01b815262000088918391600401918252602082015260400190565b60405180910390fd5b620000b38260e001516337890bfd60e21b620007e960201b620027611760201c565b620000e35760e0820151604051632667a00d60e21b81526001600160a01b03909116600482015260240162000088565b60008260e001516001600160a01b031663de242ff46040518163ffffffff1660e01b81526004016000604051808303816000875af11580156200012a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000154919081019062000e71565b51905080821462000183576040516303d42efd60e41b8152600481018390526024810182905260440162000088565b50633b9aca008261012001511115620001c45761012082015160405163060ae0ad60e31b81526004810191909152633b9aca00602482015260440162000088565b624f1a0082610100015163ffffffff1611156200020d576101008201516040516311edb17960e31b815263ffffffff9091166004820152624f1a00602482015260440162000088565b610160820151516200023257604051633b7aa30b60e11b815260040160405180910390fd5b60c0820151620002429062000813565b6000816001600160401b038111156200025f576200025f62000a87565b60405190808252806020026020018201604052801562000289578160200160208202803683370190505b50905060005b82811015620002db5730828281518110620002ae57620002ae62000ea9565b6001600160a01b039092166020928302919091019091015280620002d28162000ebf565b9150506200028f565b508251604080516101a0810182526000808252602080880151818401528388015183850152606080890151818501526080808a01518186015260a0808601899052808b015160c087015260e08601859052610100860185905230610120870152610140860185905260016101608701819052610180870186905287518085018952868152808601829052808901879052885192830189528183529482015280870185905291820184905281018390529351632afe9adf60e21b81526001600160a01b039095169463abfa6b7c94620003b99493909160040162000f8f565b6020604051808303816000875af1158015620003d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ff91906200112a565b6001600160a01b031660a0819052604080516311b2515f60e31b81529051638d928af8916004808201926020929091908290030181865afa15801562000449573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046f91906200112a565b6001600160a01b03166080816001600160a01b03168152505060a0516001600160a01b031663893d20e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ef91906200112a565b6001600160a01b0390811660c052610140840151811660e05260a0516040805163038fff2d60e41b8152905191909216916338fff2d09160048083019260209291908290030181865afa1580156200054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000571919062001151565b61010090815260c08401516003805462010000600160b01b031916620100006001600160a01b039384160217905560e0850151166101405283015163ffffffff16610120526101608301518051620005d39160029160209190910190620009a4565b5061012083015161016052816001600160401b03811115620005f957620005f962000a87565b60405190808252806020026020018201604052801562000623578160200160208202803683370190505b506003546201000090046001600160a01b0316600090815260076020908152604090912082516200065b939192919091019062000a33565b50816001600160401b0381111562000677576200067762000a87565b604051908082528060200260200182016040528015620006a1578160200160208202803683370190505b508051620006b89160089160209091019062000a33565b508260e001516001600160a01b03168360c001516001600160a01b031684600001516001600160a01b03167f91ef1cf10f75ecc4382f0f95f6322be3a80e6244d49f75f37bf58a6caf9a7b7f86602001518760400151886060015189608001518a60a001518b61010001518c61012001518d61014001518e61016001516040516200074c999897969594939291906200116b565b60405180910390a460c08301516040516001600160a01b03909116906000907fa14fc14d8620a708a896fd11392a235647d99385500a295f0d7da2a258b2e967908290a350505062001292565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620007f6836200087a565b80156200080a57506200080a8383620008b2565b90505b92915050565b6001600160a01b0381166200083b5760405163c93c257960e01b815260040160405180910390fd5b6000546001600160a01b0382811691161415620008775760405163058cd72160e21b81526001600160a01b038216600482015260240162000088565b50565b60006200088f826301ffc9a760e01b620008b2565b80156200080d5750620008ab826001600160e01b0319620008b2565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906200091b90869062001213565b6000604051808303818686fa925050503d806000811462000959576040519150601f19603f3d011682016040523d82523d6000602084013e6200095e565b606091505b50915091506020815110156200097b57600093505050506200080d565b8180156200099a5750808060200190518101906200099a919062001231565b9695505050505050565b828054620009b29062001255565b90600052602060002090601f016020900481019282620009d6576000855562000a21565b82601f10620009f157805160ff191683800117855562000a21565b8280016001018555821562000a21579182015b8281111562000a2157825182559160200191906001019062000a04565b5062000a2f92915062000a70565b5090565b82805482825590600052602060002090810192821562000a21579160200282018281111562000a2157825182559160200191906001019062000a04565b5b8082111562000a2f576000815560010162000a71565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b038111828210171562000ac35762000ac362000a87565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000af45762000af462000a87565b604052919050565b6001600160a01b03811681146200087757600080fd5b805162000b1f8162000afc565b919050565b60005b8381101562000b4157818101518382015260200162000b27565b8381111562000b51576000848401525b50505050565b600082601f83011262000b6957600080fd5b81516001600160401b0381111562000b855762000b8562000a87565b62000b9a601f8201601f191660200162000ac9565b81815284602083860101111562000bb057600080fd5b62000bc382602083016020870162000b24565b949350505050565b60006001600160401b0382111562000be75762000be762000a87565b5060051b60200190565b600082601f83011262000c0357600080fd5b8151602062000c1c62000c168362000bcb565b62000ac9565b82815260059290921b8401810191818101908684111562000c3c57600080fd5b8286015b8481101562000c6457805162000c568162000afc565b835291830191830162000c40565b509695505050505050565b600082601f83011262000c8157600080fd5b8151602062000c9462000c168362000bcb565b82815260059290921b8401810191818101908684111562000cb457600080fd5b8286015b8481101562000c64578051835291830191830162000cb8565b805163ffffffff8116811462000b1f57600080fd5b60006020828403121562000cf957600080fd5b81516001600160401b038082111562000d1157600080fd5b90830190610180828603121562000d2757600080fd5b62000d3162000a9d565b62000d3c8362000b12565b815260208301518281111562000d5157600080fd5b62000d5f8782860162000b57565b60208301525060408301518281111562000d7857600080fd5b62000d868782860162000b57565b60408301525060608301518281111562000d9f57600080fd5b62000dad8782860162000bf1565b60608301525060808301518281111562000dc657600080fd5b62000dd48782860162000c6f565b60808301525060a083015160a082015262000df260c0840162000b12565b60c082015262000e0560e0840162000b12565b60e082015261010062000e1a81850162000cd1565b90820152610120838101519082015261014062000e3981850162000b12565b90820152610160838101518381111562000e5257600080fd5b62000e608882870162000b57565b918301919091525095945050505050565b60006020828403121562000e8457600080fd5b81516001600160401b0381111562000e9b57600080fd5b62000bc38482850162000c6f565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000ee257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000815180845262000f0381602086016020860162000b24565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b8381101562000f525781516001600160a01b03168752958201959082019060010162000f2b565b509495945050505050565b600081518084526020808501945080840160005b8381101562000f525781518752958201959082019060010162000f71565b600061014080835262000fad81840188516001600160a01b03169052565b60208701516101a0610160818187015262000fcd6102e087018462000ee9565b925060408a015161013f196101808189870301818a015262000ff0868462000ee9565b955060608d015192508189870301858a01526200100e868462000f17565b955060808d0151945081898703016101c08a01526200102e868662000f5d565b955060a08d0151945081898703016101e08a01526200104e868662000f17565b955060c08d01516102008a015260e08d01516102208a01526101008d01516102408a01526101209450848d01519250620010946102608a01846001600160a01b03169052565b958c0151151561028089015250508901518015156102a0870152928901516102c0860152875115156020808701919091528801511515604080870191909152880151151560608601529092508290865115156080868101919091526020880151151560a08701526040880151151560c08701526060880151151560e0870152909601511515610100850152505092015292915050565b6000602082840312156200113d57600080fd5b81516200114a8162000afc565b9392505050565b6000602082840312156200116457600080fd5b5051919050565b6000610120808352620011818184018d62000ee9565b9050828103602084015262001197818c62000ee9565b90508281036040840152620011ad818b62000f17565b90508281036060840152620011c3818a62000f5d565b6080840189905263ffffffff881660a085015260c084018790526001600160a01b03861660e0850152838103610100850152905062001203818562000ee9565b9c9b505050505050505050505050565b600082516200122781846020870162000b24565b9190910192915050565b6000602082840312156200124457600080fd5b815180151581146200114a57600080fd5b600181811c908216806200126a57607f821691505b602082108114156200128c57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051615281620013d8600039600081816105b701528181612c0d0152612d98015260008181610440015261388301526000818161056a01526124b2015260008181610467015281816108c501528181611ded01526141c301526000818161062d0152611fd50152600081816104b001528181610d140152818161147e015281816121a401528181612223015281816128d901526129620152600081816103790152818161079d01528181610b800152818161138a015281816115170152818161188201528181611ee8015281816120d3015281816126dd015281816130870152818161336b0152818161390f0152613e3b015260008181610419015281816108fb01528181611dc00152818161376c015281816137fc01528181613830015261430c01526152816000f3fe608060405234801561001057600080fd5b50600436106103155760003560e01c8063715018a6116101a7578063bae930cb116100ee578063de9a395511610097578063ecdbb2b311610071578063ecdbb2b3146106ab578063f2fde38b146106be578063f89f27ed146106d157600080fd5b8063de9a39551461067d578063e30c397814610690578063ea0ebcec146106a357600080fd5b8063d4cadf68116100c8578063d4cadf681461064f578063d668319b14610657578063d92a2c3b1461066a57600080fd5b8063bae930cb14610600578063d353ac7c14610613578063d38dc45d1461062857600080fd5b80639b14d4c611610150578063a6f7f5d61161012a578063a6f7f5d6146105b2578063aa6ca808146105d9578063b3f05b97146105ee57600080fd5b80639b14d4c614610565578063a186a8431461058c578063a582c3e01461059f57600080fd5b806379ba50971161018157806379ba5097146105395780638a0dac4a146105415780638da5cb5b1461055457600080fd5b8063715018a6146105135780637284e4161461051b578063779b3c001461053057600080fd5b806334e199071161026b5780634771233b1161021457806359e97475116101ee57806359e97475146104da5780635c3ad75b146104ed5780636ea056a91461050057600080fd5b80634771233b146104a25780634aa9d585146104ab5780634bb278f3146104d257600080fd5b80633a5381b5116102455780633a5381b51461043b5780633e0dc34e14610462578063452a93201461048957600080fd5b806334e19907146103f9578063351a964d1461040c578063394b71cf1461041457600080fd5b806317700f01116102cd5780632612d285116102a75780632612d285146103d657806329869ac2146103de5780632adcfeab146103e657600080fd5b806317700f01146103b357806317869dfb146103bb57806323452b9c146103ce57600080fd5b806309402ebd116102fe57806309402ebd14610340578063158ef93e1461035757806316f0115b1461037457600080fd5b8063022a1e831461031a578063053d7a2414610324575b600080fd5b6103226106d9565b005b61032d60095481565b6040519081526020015b60405180910390f35b6103486108b6565b6040516103379392919061482b565b6003546103649060ff1681565b6040519015158152602001610337565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610337565b610322610975565b6103226103c93660046148ad565b6109ee565b610322610dca565b610322610ea0565b610322610f15565b6103226103f43660046148fe565b6111c5565b610322610407366004614940565b6112d9565b610364611513565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b61032d7f000000000000000000000000000000000000000000000000000000000000000081565b60035461039b906201000090046001600160a01b031681565b61032d60055481565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b61032261159c565b6103226104e83660046148fe565b611733565b61032d6104fb366004614940565b611817565b61032261050e36600461496e565b611838565b6103226118fd565b61052361195e565b60405161033791906149f2565b61032d60065481565b6103226119ec565b61032261054f366004614a05565b611a3e565b6000546001600160a01b031661039b565b61032d7f000000000000000000000000000000000000000000000000000000000000000081565b61032261059a3660046148fe565b611c0f565b61032d6105ad36600461496e565b611e61565b61032d7f000000000000000000000000000000000000000000000000000000000000000081565b6105e1611e92565b6040516103379190614a22565b60035461036490610100900460ff1681565b61032d61060e366004614940565b611ea4565b61061b611ed3565b6040516103379190614a35565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b61032d611ee4565b610322610665366004614a8d565b611f68565b6103226106783660046148fe565b612066565b61032261068b3660046148fe565b6122c8565b60045461039b906001600160a01b031681565b6103226123d3565b6103226106b93660046148fe565b612525565b6103226106cc366004614a05565b612601565b61061b6126d9565b6002600154141561071f5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c83398151915260448201526064015b60405180910390fd5b60026001556003546201000090046001600160a01b031633146107555760405163f5185ed160e01b815260040160405180910390fd5b60035460ff1661077857604051630d02863960e41b815260040160405180910390fd5b600554156107995760405163253aa89960e21b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108219190810190614bcf565b80519091506000805b8281101561086b5783818151811061084457610844614c04565b6020026020010151826108579190614c30565b91508061086381614c48565b91505061082a565b506108768382612786565b7fe1c26311599888c5d4545b1d0a5496eaf69b01efac05dcff1ad20cf8527adc9b836040516108a59190614a35565b60405180910390a150506001805550565b604051631f29a8cd60e31b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260609081906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f94d466890602401600060405180830381865afa158015610942573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261096a9190810190614c63565b925092509250909192565b6000546001600160a01b031633148015906109a157506003546201000090046001600160a01b03163314155b156109bf5760405163b232ee5560e01b815260040160405180910390fd5b60035460ff166109e257604051630d02863960e41b815260040160405180910390fd5b6109ec600061294b565b565b60026001541415610a2f5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556003546201000090046001600160a01b03163314610a655760405163f5185ed160e01b815260040160405180910390fd5b60035460ff16610a8857604051630d02863960e41b815260040160405180910390fd5b60055415610aa95760405163253aa89960e21b815260040160405180910390fd5b63ffffffff821115610adb576040516301f6e8bd60e21b81526004810183905263ffffffff6024820152604401610716565b63ffffffff811115610b0d5760405163c4fb80b760e01b81526004810182905263ffffffff6024820152604401610716565b610b174283612a04565b915080821115610b3a5760405163bb1cd83f60e01b815260040160405180910390fd5b80610b4761384084614c30565b1115610b7c57610b578282614d31565b6040516323947a2b60e21b815260048101919091526138406024820152604401610716565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bdc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c049190810190614bcf565b90506000610c10611e92565b80519091506000610c22888885612a1a565b90506000610c308787614d31565b90506000610c458266038d7ea4c68000614d48565b905060005b84811015610cfc576000610c90888381518110610c6957610c69614c04565b6020026020010151868481518110610c8357610c83614c04565b6020026020010151612bc3565b905082811115610ce957868281518110610cac57610cac614c04565b6020908102919091010151604051623e294360e81b81526001600160a01b0390911660048201526024810182905260448101849052606401610716565b5080610cf481614c48565b915050610c4a565b50604051633e56920560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633e56920590610d4d908b908b908890600401614d67565b600060405180830381600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b505050507f10d2cebdbfcb912ca22f107e18eadc260a534609e13140deac4568a732171826888885604051610db293929190614d67565b60405180910390a15050600180555050505050505050565b6000546001600160a01b03163314610e125760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b6004546001600160a01b0316610e3b5760405163aa84e89360e01b815260040160405180910390fd5b6004546001600160a01b0316610e596000546001600160a01b031690565b6001600160a01b03167fe83a760af9d3c86797ea13c8979010086f067cfe3c985b2d03d951248600c50f60405160405180910390a3600480546001600160a01b0319169055565b6000546001600160a01b03163314610ee85760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff16610f0b57604051630d02863960e41b815260040160405180910390fd5b6109ec600161294b565b60026001541415610f565760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b600260015560035460ff16610f7e57604051630d02863960e41b815260040160405180910390fd5b60055415610f9f5760405163253aa89960e21b815260040160405180910390fd5b6003546201000090046001600160a01b0316331415610fc057610fc0612c0b565b33600090815260076020526040902054610fef57604051638f8e17d160e01b8152336004820152602401610716565b606080610ffa6108b6565b508151336000908152600760209081526040808320805482518185028101850190935280835296985094965092949193919083018282801561105b57602002820191906000526020600020905b815481526020019060010190808311611047575b5050505050905060005b828110156111495781818151811061107f5761107f614c04565b60200260200101516008828154811061109a5761109a614c04565b9060005260206000200160008282546110b39190614d31565b90915550503360009081526007602052604081208054839081106110d9576110d9614c04565b9060005260206000200181905550611137338383815181106110fd576110fd614c04565b602002602001015187848151811061111757611117614c04565b60200260200101516001600160a01b0316612fe49092919063ffffffff16565b8061114181614c48565b915050611065565b506003546201000090046001600160a01b0316331461117a5733600090815260076020526040812061117a91614739565b336001600160a01b03167ff07ac40708a36cdbc3311e096e0f0dd64d741b00090c5d161783487c2415e544826040516111b39190614a35565b60405180910390a25050600180555050565b600260015414156112065760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146112535760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1661127657604051630d02863960e41b815260040160405180910390fd5b600554156112975760405163253aa89960e21b815260040160405180910390fd5b60006112a16108b6565b92505050438114156112c6576040516301ff841d60e51b815260040160405180910390fd5b6112d08383613061565b50506001805550565b6002600154141561131a5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556003546201000090046001600160a01b031633146113505760405163f5185ed160e01b815260040160405180910390fd5b603c60095461135f9190614c30565b42101561137f57604051632843635360e01b815260040160405180910390fd5b4260098190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166355c676286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190614d8f565b905060008183116114245761141f8383614d31565b61142e565b61142e8284614d31565b90506611c37937e08000811115611468576040516380d8c52b60e01b8152600481018290526611c37937e080006024820152604401610716565b604051631c74c91760e11b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338e9922e90602401600060405180830381600087803b1580156114ca57600080fd5b505af11580156114de573d6000803e3d6000fd5b505050507fcda74150def0ede554aff5f677be9df0e226fddff9bd9ceddf732b9673b1c92d836040516108a591815260200190565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166347bc4d926040518163ffffffff1660e01b8152600401602060405180830381865afa158015611573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115979190614da8565b905090565b600260015414156115dd5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b0316331461162a5760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1661164d57604051630d02863960e41b815260040160405180910390fd5b600354610100900460ff16156116765760405163a8301b8360e01b815260040160405180910390fd5b6005546116965760405163ba92a7ed60e01b815260040160405180910390fd5b4260055411156116bf576005546040516397f6ebc760e01b815260040161071691815260200190565b6003805461ff00191661010017905560006116d8613412565b90506116ec6000546001600160a01b031690565b6001600160a01b03167fdc2a54875b2c12c509c49d8497fade5643d0547ce751bae768b9e9ae8c647480826040516117249190614a35565b60405180910390a25060018055565b600260015414156117745760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146117c15760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff166117e457604051630d02863960e41b815260040160405180910390fd5b600554156118055760405163253aa89960e21b815260040160405180910390fd5b61180f8282613061565b505060018055565b6008818154811061182757600080fd5b600091825260209091200154905081565b6000546001600160a01b031633146118805760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156118d35760405163d0cbace960e01b815260040160405180910390fd5b6118f96118e86000546001600160a01b031690565b6001600160a01b0384169083612fe4565b5050565b6000546001600160a01b031633146119455760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b604051634fdacacf60e01b815260040160405180910390fd5b6002805461196b90614dca565b80601f016020809104026020016040519081016040528092919081815260200182805461199790614dca565b80156119e45780601f106119b9576101008083540402835291602001916119e4565b820191906000526020600020905b8154815290600101906020018083116119c757829003601f168201915b505050505081565b6004546001600160a01b03163314611a1757604051637a6df06f60e01b815260040160405180910390fd5b600454611a2c906001600160a01b0316613591565b600480546001600160a01b0319169055565b60026001541415611a7f5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b03163314611acc5760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b611ad5816135e1565b60035460ff168015611ae75750600554155b15611af457611af4612c0b565b6001600160a01b038116600090815260076020526040902054611b8b57611b19611e92565b5167ffffffffffffffff811115611b3257611b32614af9565b604051908082528060200260200182016040528015611b5b578160200160208202803683370190505b506001600160a01b03821660009081526007602090815260409091208251611b899391929190910190614757565b505b6003546040516001600160a01b038084169262010000900416907fa14fc14d8620a708a896fd11392a235647d99385500a295f0d7da2a258b2e96790600090a3600380546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff90921691909117905560018055565b6000546001600160a01b03163314611c575760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1615611c7b57604051635feef03760e01b815260040160405180910390fd5b6003805460ff19166001179055426006556000611c96611e92565b805190915060008167ffffffffffffffff811115611cb657611cb6614af9565b604051908082528060200260200182016040528015611cdf578160200160208202803683370190505b5090506000611cef868686612a1a565b905060005b83811015611d6757611d38858281518110611d1157611d11614c04565b6020026020010151838381518110611d2b57611d2b614c04565b6020026020010151613645565b838281518110611d4a57611d4a614c04565b602090810291909101015280611d5f81614c48565b915050611cf4565b5060008082604051602001611d7d929190614e1b565b60408051601f198184030181526080830182528783526020830186905282820181905260006060840152905163172b958560e31b81529092506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b95cac2890611e1b907f000000000000000000000000000000000000000000000000000000000000000090309081908790600401614e44565b600060405180830381600087803b158015611e3557600080fd5b505af1158015611e49573d6000803e3d6000fd5b50505050611e57600161294b565b5050505050505050565b60076020528160005260406000208181548110611e7d57600080fd5b90600052602060002001600091509150505481565b6060611e9c6108b6565b509092915050565b600080611eaf611ed3565b9050808381518110611ec357611ec3614c04565b6020026020010151915050919050565b6060611edd6108b6565b5092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166355c676286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f44573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115979190614d8f565b6000546001600160a01b03163314611fb05760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff16611fd357604051630d02863960e41b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b6301406120146000546001600160a01b031690565b868686866040518663ffffffff1660e01b8152600401612038959493929190614f9a565b600060405180830381600087803b15801561205257600080fd5b505af1158015611e57573d6000803e3d6000fd5b6000546001600160a01b031633146120ae5760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff166120d157604051630d02863960e41b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166347bc4d926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121539190614da8565b156121715760405163721c238360e01b815260040160405180910390fd5b600061217b611e92565b9050600061218a848484612a1a565b604051633e56920560e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633e569205906121dd90429081908690600401614d67565b600060405180830381600087803b1580156121f757600080fd5b505af115801561220b573d6000803e3d6000fd5b5050604051633806be4b60e21b8152600160048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063e01af92c9150602401600060405180830381600087803b15801561227157600080fd5b505af1158015612285573d6000803e3d6000fd5b505050507faca0f1c3f5bcb639955c1a1efad051b1ef42f86b76694900ac0ff5a8165f779d42826040516122ba9291906150b1565b60405180910390a150505050565b600260015414156123095760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146123565760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1661237957604051630d02863960e41b815260040160405180910390fd5b6005541561239a5760405163253aa89960e21b815260040160405180910390fd5b60006123a46108b6565b92505050438114156123c9576040516301ff841d60e51b815260040160405180910390fd5b6112d0838361385d565b600260015414156124145760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146124615760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1661248457604051630d02863960e41b815260040160405180910390fd5b600554156124a55760405163253aa89960e21b815260040160405180910390fd5b6124ad612c0b565b6124d77f000000000000000000000000000000000000000000000000000000000000000042614c30565b6005556124e4600061294b565b7fa3f032386f9b5d8bac197b7631bf43c667393828263c2cece0e43b63f015cf1d60055460405161251791815260200190565b60405180910390a160018055565b600260015414156125665760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146125b35760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff166125d657604051630d02863960e41b815260040160405180910390fd5b600554156125f75760405163253aa89960e21b815260040160405180910390fd5b61180f828261385d565b6000546001600160a01b031633146126495760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b6001600160a01b03811661267057604051634616c29760e01b815260040160405180910390fd5b600480546001600160a01b0383166001600160a01b031990911681179091556126a16000546001600160a01b031690565b6001600160a01b03167fc6d61e41813bc81d93c1b08d44a36d3c91d6e3a7a76e216120c215db016490c060405160405180910390a350565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612739573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115979190810190614bcf565b600061276c83613ecf565b801561277d575061277d8383613f02565b90505b92915050565b815160008167ffffffffffffffff8111156127a3576127a3614af9565b6040519080825280602002602001820160405280156127cc578160200160208202803683370190505b5090506000805b8381101561286a5784670de0b6b3a76400008783815181106127f7576127f7614c04565b60200260200101516128099190614d48565b61281391906150ca565b83828151811061282557612825614c04565b60200260200101818152505082818151811061284357612843614c04565b6020026020010151826128569190614c30565b91508061286281614c48565b9150506127d3565b5080670de0b6b3a76400008360008151811061288857612888614c04565b602002602001015161289a9190614c30565b6128a49190614d31565b826000815181106128b7576128b7614c04565b6020908102919091010152604051633e56920560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633e5692059061291290429081908790600401614d67565b600060405180830381600087803b15801561292c57600080fd5b505af1158015612940573d6000803e3d6000fd5b505050505050505050565b604051633806be4b60e21b815281151560048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e01af92c90602401600060405180830381600087803b1580156129ae57600080fd5b505af11580156129c2573d6000803e3d6000fd5b505050507f8bcc108c7d867d0a70433f71ecba3056c4dcc48eaabe4ca987f9fb1f836091d5816040516129f9911515815260200190565b60405180910390a150565b6000818311612a13578161277d565b5090919050565b8051606090838114612a495760405163ba34664360e01b81526004810182905260248101859052604401610716565b60008167ffffffffffffffff811115612a6457612a64614af9565b604051908082528060200260200182016040528015612a8d578160200160208202803683370190505b50905060005b82811015612bb757848181518110612aad57612aad614c04565b60200260200101516001600160a01b0316878783818110612ad057612ad0614c04565b612ae69260206040909202019081019150614a05565b6001600160a01b031614612b6c57868682818110612b0657612b06614c04565b612b1c9260206040909202019081019150614a05565b858281518110612b2e57612b2e614c04565b602090810291909101015160405163030c4e0160e61b81526001600160a01b0392831660048201529116602482015260448101829052606401610716565b868682818110612b7e57612b7e614c04565b90506040020160200135828281518110612b9a57612b9a614c04565b602090810291909101015280612baf81614c48565b915050612a93565b509150505b9392505050565b6000818311612bee5782612bdf83670de0b6b3a7640000614d48565b612be991906150ca565b61277d565b81612c0184670de0b6b3a7640000614d48565b61277d91906150ca565b7f0000000000000000000000000000000000000000000000000000000000000000612c3257565b6006544211612c3d57565b606080612c486108b6565b508151919350915060008167ffffffffffffffff811115612c6b57612c6b614af9565b604051908082528060200260200182016040528015612c94578160200160208202803683370190505b50905060008267ffffffffffffffff811115612cb257612cb2614af9565b604051908082528060200260200182016040528015612cdb578160200160208202803683370190505b50905060005b83811015612e2c57858181518110612cfb57612cfb614c04565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6f9190614d8f565b828281518110612d8157612d81614c04565b602002602001018181525050670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000060065442612dc59190614d31565b878481518110612dd757612dd7614c04565b6020026020010151612de99190614d48565b612df39190614d48565b612dfd91906150ca565b838281518110612e0f57612e0f614c04565b602090810291909101015280612e2481614c48565b915050612ce1565b5042600655612e3a82614000565b60005b83811015612fdc57818181518110612e5757612e57614c04565b6020026020010151868281518110612e7157612e71614c04565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee59190614d8f565b612eef9190614d31565b838281518110612f0157612f01614c04565b602002602001018181525050828181518110612f1f57612f1f614c04565b6020908102919091018101516003546201000090046001600160a01b0316600090815260079092526040909120805483908110612f5e57612f5e614c04565b906000526020600020016000828254612f779190614c30565b92505081905550828181518110612f9057612f90614c04565b602002602001015160088281548110612fab57612fab614c04565b906000526020600020016000828254612fc49190614c30565b90915550819050612fd481614c48565b915050612e3d565b505050505050565b6040516001600160a01b03831660248201526044810182905261305c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915261405e565b505050565b613069612c0b565b6060806130746108b6565b50809250819350505060008251905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156130e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261310b9190810190614bcf565b905060008267ffffffffffffffff81111561312857613128614af9565b604051908082528060200260200182016040528015613151578160200160208202803683370190505b5090506000613161888888612a1a565b905060005b848110156131d55781818151811061318057613180614c04565b60200260200101516000146131c3576131a4878281518110611d1157611d11614c04565b8382815181106131b6576131b6614c04565b6020026020010181815250505b806131cd81614c48565b915050613166565b506131e1826002614143565b6131ec826001614143565b60006131f6611ed3565b90506000805b8681101561333b5783818151811061321657613216614c04565b60200260200101516000146133025787818151811061323757613237614c04565b602002602001015183828151811061325157613251614c04565b602002602001015187838151811061326b5761326b614c04565b602002602001015161327d9190614d48565b61328791906150ca565b86828151811061329957613299614c04565b6020026020010181815250508781815181106132b7576132b7614c04565b60200260200101518382815181106132d1576132d1614c04565b60200260200101516132e39190614d31565b8582815181106132f5576132f5614c04565b6020026020010181815250505b85818151811061331457613314614c04565b6020026020010151826133279190614c30565b91508061333381614c48565b9150506131fc565b506133468582612786565b7f778d328810650d10cb37a1ec58af34374e6eb175435d895ef712a781e6cb1b8083857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156133c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133ef9190810190614bcf565b6040516133fe939291906150ec565b60405180910390a150505050505050505050565b606080606061341f6108b6565b50815191935091508067ffffffffffffffff81111561344057613440614af9565b604051908082528060200260200182016040528015613469578160200160208202803683370190505b50935061347582614000565b60008060005b838110156135885785818151811061349557613495614c04565b60200260200101519150600881815481106134b2576134b2614c04565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015613502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135269190614d8f565b6135309190614d31565b92506135586135476000546001600160a01b031690565b6001600160a01b0384169085612fe4565b8287828151811061356b5761356b614c04565b60209081029190910101528061358081614c48565b91505061347b565b50505050505090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166136085760405163c93c257960e01b815260040160405180910390fd5b6000546001600160a01b03828116911614156136425760405163058cd72160e21b81526001600160a01b0382166004820152602401610716565b50565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa15801561368e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b29190614d8f565b90506136db6136c96000546001600160a01b031690565b6001600160a01b03861690308661437b565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a0823190602401602060405180830381865afa158015613721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137459190614d8f565b61374f9190614d31565b604051636eb1769f60e11b81523060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015291925060009186169063dd62ed3e90604401602060405180830381865afa1580156137c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e59190614d8f565b90508015613821576138216001600160a01b0386167f0000000000000000000000000000000000000000000000000000000000000000836143b9565b6138556001600160a01b0386167f0000000000000000000000000000000000000000000000000000000000000000846144e0565b509392505050565b613865612c0b565b6060806138706108b6565b50809250819350505060008251905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de242ff46040518163ffffffff1660e01b81526004016000604051808303816000875af11580156138e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139099190810190614bcf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561396b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139939190810190614bcf565b905060008367ffffffffffffffff8111156139b0576139b0614af9565b6040519080825280602002602001820160405280156139d9578160200160208202803683370190505b50905060006139e9898989612a1a565b905060005b85811015613be657868181518110613a0857613a08614c04565b6020026020010151828281518110613a2257613a22614c04565b60200260200101511180613a675750848181518110613a4357613a43614c04565b6020026020010151828281518110613a5d57613a5d614c04565b6020026020010151115b15613b0e57878181518110613a7e57613a7e614c04565b6020026020010151828281518110613a9857613a98614c04565b6020026020010151613adc898481518110613ab557613ab5614c04565b6020026020010151888581518110613acf57613acf614c04565b6020026020010151614592565b60405163bdac907560e01b81526001600160a01b03909316600484015260248301919091526044820152606401610716565b818181518110613b2057613b20614c04565b6020026020010151600014613bd457878181518110613b4157613b41614c04565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015613b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb59190614d8f565b838281518110613bc757613bc7614c04565b6020026020010181815250505b80613bde81614c48565b9150506139ee565b50613bf081614000565b6000805b86811015613e0a57828181518110613c0e57613c0e614c04565b6020026020010151600014613dd157838181518110613c2f57613c2f614c04565b6020026020010151898281518110613c4957613c49614c04565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015613c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbd9190614d8f565b613cc79190614d31565b848281518110613cd957613cd9614c04565b602002602001018181525050613d26613cfa6000546001600160a01b031690565b858381518110613d0c57613d0c614c04565b60200260200101518b848151811061111757611117614c04565b6000838281518110613d3a57613d3a614c04565b6020026020010151898381518110613d5457613d54614c04565b6020026020010151613d669190614d31565b9050888281518110613d7a57613d7a614c04565b602002602001015181878481518110613d9557613d95614c04565b6020026020010151613da79190614d48565b613db191906150ca565b868381518110613dc357613dc3614c04565b602002602001018181525050505b848181518110613de357613de3614c04565b602002602001015182613df69190614c30565b915080613e0281614c48565b915050613bf4565b50613e158482612786565b7f19b6b36dbef13cbe025e192eee2e5528d4a90ac8ce2b7519c5f527ea9803ee5e8284877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa158015613e97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ebf9190810190614bcf565b6040516133fe9493929190615125565b6000613ee2826301ffc9a760e01b613f02565b80156127805750613efb826001600160e01b0319613f02565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090613f7e908690615172565b6000604051808303818686fa925050503d8060008114613fba576040519150601f19603f3d011682016040523d82523d6000602084013e613fbf565b606091505b5091509150602081511015613fda5760009350505050612780565b818015613ff6575080806020019051810190613ff69190614da8565b9695505050505050565b6000815167ffffffffffffffff81111561401c5761401c614af9565b604051908082528060200260200182016040528015614045578160200160208202803683370190505b509050614053826000614143565b6118f9816002614143565b60006140b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145a19092919063ffffffff16565b80519091501561305c57808060200190518101906140d19190614da8565b61305c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610716565b815160008167ffffffffffffffff81111561416057614160614af9565b6040519080825280602002602001820160405280156141b257816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161417e5790505b50905060006141bf611e92565b90507f000000000000000000000000000000000000000000000000000000000000000060005b848110156142f4578584828151811061420057614200614c04565b602002602001015160000190600281111561421d5761421d614e05565b9081600281111561423057614230614e05565b815250508184828151811061424757614247614c04565b6020026020010151602001818152505082818151811061426957614269614c04565b602002602001015184828151811061428357614283614c04565b6020026020010151604001906001600160a01b031690816001600160a01b0316815250508681815181106142b9576142b9614c04565b60200260200101518482815181106142d3576142d3614c04565b602090810291909101015160600152806142ec81614c48565b9150506141e5565b50604051637362304960e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6c460929061434190869060040161518e565b600060405180830381600087803b15801561435b57600080fd5b505af115801561436f573d6000803e3d6000fd5b50505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526143b39085906323b872dd60e01b90608401613010565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015614409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061442d9190614d8f565b9050818110156144a55760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610716565b6040516001600160a01b038416602482015282820360448201819052906144d990869063095ea7b360e01b90606401613010565b5050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015614531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145559190614d8f565b61455f9190614c30565b6040516001600160a01b0385166024820152604481018290529091506143b390859063095ea7b360e01b90606401613010565b6000818310612a13578161277d565b60606145b084846000856145b8565b949350505050565b6060824710156146305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610716565b6001600160a01b0385163b6146875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610716565b600080866001600160a01b031685876040516146a39190615172565b60006040518083038185875af1925050503d80600081146146e0576040519150601f19603f3d011682016040523d82523d6000602084013e6146e5565b606091505b50915091506146f5828286614700565b979650505050505050565b6060831561470f575081612bbc565b82511561471f5782518084602001fd5b8160405162461bcd60e51b815260040161071691906149f2565b508054600082559060005260206000209081019061364291906147a2565b828054828255906000526020600020908101928215614792579160200282015b82811115614792578251825591602001919060010190614777565b5061479e9291506147a2565b5090565b5b8082111561479e57600081556001016147a3565b600081518084526020808501945080840160005b838110156147f05781516001600160a01b0316875295820195908201906001016147cb565b509495945050505050565b600081518084526020808501945080840160005b838110156147f05781518752958201959082019060010161480f565b60608152600061483e60608301866147b7565b828103602084015261485081866147fb565b915050826040830152949350505050565b60008083601f84011261487357600080fd5b50813567ffffffffffffffff81111561488b57600080fd5b6020830191508360208260061b85010111156148a657600080fd5b9250929050565b600080600080606085870312156148c357600080fd5b843567ffffffffffffffff8111156148da57600080fd5b6148e687828801614861565b90989097506020870135966040013595509350505050565b6000806020838503121561491157600080fd5b823567ffffffffffffffff81111561492857600080fd5b61493485828601614861565b90969095509350505050565b60006020828403121561495257600080fd5b5035919050565b6001600160a01b038116811461364257600080fd5b6000806040838503121561498157600080fd5b823561498c81614959565b946020939093013593505050565b60005b838110156149b557818101518382015260200161499d565b838111156143b35750506000910152565b600081518084526149de81602086016020860161499a565b601f01601f19169290920160200192915050565b60208152600061277d60208301846149c6565b600060208284031215614a1757600080fd5b8135612bbc81614959565b60208152600061277d60208301846147b7565b60208152600061277d60208301846147fb565b60008083601f840112614a5a57600080fd5b50813567ffffffffffffffff811115614a7257600080fd5b6020830191508360208260051b85010111156148a657600080fd5b60008060008060408587031215614aa357600080fd5b843567ffffffffffffffff80821115614abb57600080fd5b614ac788838901614a48565b90965094506020870135915080821115614ae057600080fd5b50614aed87828801614a48565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614b3857614b38614af9565b604052919050565b600067ffffffffffffffff821115614b5a57614b5a614af9565b5060051b60200190565b600082601f830112614b7557600080fd5b81516020614b8a614b8583614b40565b614b0f565b82815260059290921b84018101918181019086841115614ba957600080fd5b8286015b84811015614bc45780518352918301918301614bad565b509695505050505050565b600060208284031215614be157600080fd5b815167ffffffffffffffff811115614bf857600080fd5b6145b084828501614b64565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614c4357614c43614c1a565b500190565b6000600019821415614c5c57614c5c614c1a565b5060010190565b600080600060608486031215614c7857600080fd5b835167ffffffffffffffff80821115614c9057600080fd5b818601915086601f830112614ca457600080fd5b81516020614cb4614b8583614b40565b82815260059290921b8401810191818101908a841115614cd357600080fd5b948201945b83861015614cfa578551614ceb81614959565b82529482019490820190614cd8565b91890151919750909350505080821115614d1357600080fd5b50614d2086828701614b64565b925050604084015190509250925092565b600082821015614d4357614d43614c1a565b500390565b6000816000190483118215151615614d6257614d62614c1a565b500290565b838152826020820152606060408201526000614d8660608301846147fb565b95945050505050565b600060208284031215614da157600080fd5b5051919050565b600060208284031215614dba57600080fd5b81518015158114612bbc57600080fd5b600181811c90821680614dde57607f821691505b60208210811415614dff57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b600060048410614e2d57614e2d614e05565b838252604060208301526145b060408301846147fb565b848152600060206001600160a01b03808716828501528086166040850152506080606084015261010083018451608080860152818151808452610120870191508483019350600092505b80831015614eb95783516001600160a01b031682526020820191508484019350600183019250614e8e565b50838701519350607f199250828682030160a0870152614ed981856147fb565b935050506040850151818584030160c0860152614ef683826149c6565b925050506060840151614bc460e085018215159052565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614f3f57600080fd5b8260051b8083602087013760009401602001938452509192915050565b8183526000602080850194508260005b858110156147f0578135614f7f81614959565b6001600160a01b031687529582019590820190600101614f6c565b6001600160a01b0386811682526060602080840182905283820187905260009260809182860160058a901b870184018b875b8c81101561508b57898303607f190184528135368f9003609e19018112614ff257600080fd5b8e0180358452858101358685015260a060408083013561501181614959565b891690860152818a01358a8601528882013536839003601e1901811261503657600080fd5b8201803567ffffffffffffffff81111561504f57600080fd5b8060051b360384131561506157600080fd5b828b880152615075838801828b8501614f0d565b9789019796505050928601925050600101614fcc565b505087810360408901526150a0818a8c614f5c565b9d9c50505050505050505050505050565b8281526040602082015260006145b060408301846147fb565b6000826150e757634e487b7160e01b600052601260045260246000fd5b500490565b6060815260006150ff60608301866147fb565b828103602084015261511181866147fb565b90508281036040840152613ff681856147fb565b60808152600061513860808301876147fb565b828103602084015261514a81876147fb565b9050828103604084015261515e81866147fb565b905082810360608401526146f581856147fb565b6000825161518481846020870161499a565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156151fe5781518051600381106151c7576151c7614e05565b85528087015187860152858101516001600160a01b03168686015260609081015190850152608090930192908501906001016151ab565b509197965050505050505056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220de33a6e601edc52aadacdb18eb8ae8f99616071f91d71fae5af2b3ded3f4758f64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103155760003560e01c8063715018a6116101a7578063bae930cb116100ee578063de9a395511610097578063ecdbb2b311610071578063ecdbb2b3146106ab578063f2fde38b146106be578063f89f27ed146106d157600080fd5b8063de9a39551461067d578063e30c397814610690578063ea0ebcec146106a357600080fd5b8063d4cadf68116100c8578063d4cadf681461064f578063d668319b14610657578063d92a2c3b1461066a57600080fd5b8063bae930cb14610600578063d353ac7c14610613578063d38dc45d1461062857600080fd5b80639b14d4c611610150578063a6f7f5d61161012a578063a6f7f5d6146105b2578063aa6ca808146105d9578063b3f05b97146105ee57600080fd5b80639b14d4c614610565578063a186a8431461058c578063a582c3e01461059f57600080fd5b806379ba50971161018157806379ba5097146105395780638a0dac4a146105415780638da5cb5b1461055457600080fd5b8063715018a6146105135780637284e4161461051b578063779b3c001461053057600080fd5b806334e199071161026b5780634771233b1161021457806359e97475116101ee57806359e97475146104da5780635c3ad75b146104ed5780636ea056a91461050057600080fd5b80634771233b146104a25780634aa9d585146104ab5780634bb278f3146104d257600080fd5b80633a5381b5116102455780633a5381b51461043b5780633e0dc34e14610462578063452a93201461048957600080fd5b806334e19907146103f9578063351a964d1461040c578063394b71cf1461041457600080fd5b806317700f01116102cd5780632612d285116102a75780632612d285146103d657806329869ac2146103de5780632adcfeab146103e657600080fd5b806317700f01146103b357806317869dfb146103bb57806323452b9c146103ce57600080fd5b806309402ebd116102fe57806309402ebd14610340578063158ef93e1461035757806316f0115b1461037457600080fd5b8063022a1e831461031a578063053d7a2414610324575b600080fd5b6103226106d9565b005b61032d60095481565b6040519081526020015b60405180910390f35b6103486108b6565b6040516103379392919061482b565b6003546103649060ff1681565b6040519015158152602001610337565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610337565b610322610975565b6103226103c93660046148ad565b6109ee565b610322610dca565b610322610ea0565b610322610f15565b6103226103f43660046148fe565b6111c5565b610322610407366004614940565b6112d9565b610364611513565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b61032d7f000000000000000000000000000000000000000000000000000000000000000081565b60035461039b906201000090046001600160a01b031681565b61032d60055481565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b61032261159c565b6103226104e83660046148fe565b611733565b61032d6104fb366004614940565b611817565b61032261050e36600461496e565b611838565b6103226118fd565b61052361195e565b60405161033791906149f2565b61032d60065481565b6103226119ec565b61032261054f366004614a05565b611a3e565b6000546001600160a01b031661039b565b61032d7f000000000000000000000000000000000000000000000000000000000000000081565b61032261059a3660046148fe565b611c0f565b61032d6105ad36600461496e565b611e61565b61032d7f000000000000000000000000000000000000000000000000000000000000000081565b6105e1611e92565b6040516103379190614a22565b60035461036490610100900460ff1681565b61032d61060e366004614940565b611ea4565b61061b611ed3565b6040516103379190614a35565b61039b7f000000000000000000000000000000000000000000000000000000000000000081565b61032d611ee4565b610322610665366004614a8d565b611f68565b6103226106783660046148fe565b612066565b61032261068b3660046148fe565b6122c8565b60045461039b906001600160a01b031681565b6103226123d3565b6103226106b93660046148fe565b612525565b6103226106cc366004614a05565b612601565b61061b6126d9565b6002600154141561071f5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c83398151915260448201526064015b60405180910390fd5b60026001556003546201000090046001600160a01b031633146107555760405163f5185ed160e01b815260040160405180910390fd5b60035460ff1661077857604051630d02863960e41b815260040160405180910390fd5b600554156107995760405163253aa89960e21b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108219190810190614bcf565b80519091506000805b8281101561086b5783818151811061084457610844614c04565b6020026020010151826108579190614c30565b91508061086381614c48565b91505061082a565b506108768382612786565b7fe1c26311599888c5d4545b1d0a5496eaf69b01efac05dcff1ad20cf8527adc9b836040516108a59190614a35565b60405180910390a150506001805550565b604051631f29a8cd60e31b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260609081906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f94d466890602401600060405180830381865afa158015610942573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261096a9190810190614c63565b925092509250909192565b6000546001600160a01b031633148015906109a157506003546201000090046001600160a01b03163314155b156109bf5760405163b232ee5560e01b815260040160405180910390fd5b60035460ff166109e257604051630d02863960e41b815260040160405180910390fd5b6109ec600061294b565b565b60026001541415610a2f5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556003546201000090046001600160a01b03163314610a655760405163f5185ed160e01b815260040160405180910390fd5b60035460ff16610a8857604051630d02863960e41b815260040160405180910390fd5b60055415610aa95760405163253aa89960e21b815260040160405180910390fd5b63ffffffff821115610adb576040516301f6e8bd60e21b81526004810183905263ffffffff6024820152604401610716565b63ffffffff811115610b0d5760405163c4fb80b760e01b81526004810182905263ffffffff6024820152604401610716565b610b174283612a04565b915080821115610b3a5760405163bb1cd83f60e01b815260040160405180910390fd5b80610b4761384084614c30565b1115610b7c57610b578282614d31565b6040516323947a2b60e21b815260048101919091526138406024820152604401610716565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bdc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c049190810190614bcf565b90506000610c10611e92565b80519091506000610c22888885612a1a565b90506000610c308787614d31565b90506000610c458266038d7ea4c68000614d48565b905060005b84811015610cfc576000610c90888381518110610c6957610c69614c04565b6020026020010151868481518110610c8357610c83614c04565b6020026020010151612bc3565b905082811115610ce957868281518110610cac57610cac614c04565b6020908102919091010151604051623e294360e81b81526001600160a01b0390911660048201526024810182905260448101849052606401610716565b5080610cf481614c48565b915050610c4a565b50604051633e56920560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633e56920590610d4d908b908b908890600401614d67565b600060405180830381600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b505050507f10d2cebdbfcb912ca22f107e18eadc260a534609e13140deac4568a732171826888885604051610db293929190614d67565b60405180910390a15050600180555050505050505050565b6000546001600160a01b03163314610e125760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b6004546001600160a01b0316610e3b5760405163aa84e89360e01b815260040160405180910390fd5b6004546001600160a01b0316610e596000546001600160a01b031690565b6001600160a01b03167fe83a760af9d3c86797ea13c8979010086f067cfe3c985b2d03d951248600c50f60405160405180910390a3600480546001600160a01b0319169055565b6000546001600160a01b03163314610ee85760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff16610f0b57604051630d02863960e41b815260040160405180910390fd5b6109ec600161294b565b60026001541415610f565760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b600260015560035460ff16610f7e57604051630d02863960e41b815260040160405180910390fd5b60055415610f9f5760405163253aa89960e21b815260040160405180910390fd5b6003546201000090046001600160a01b0316331415610fc057610fc0612c0b565b33600090815260076020526040902054610fef57604051638f8e17d160e01b8152336004820152602401610716565b606080610ffa6108b6565b508151336000908152600760209081526040808320805482518185028101850190935280835296985094965092949193919083018282801561105b57602002820191906000526020600020905b815481526020019060010190808311611047575b5050505050905060005b828110156111495781818151811061107f5761107f614c04565b60200260200101516008828154811061109a5761109a614c04565b9060005260206000200160008282546110b39190614d31565b90915550503360009081526007602052604081208054839081106110d9576110d9614c04565b9060005260206000200181905550611137338383815181106110fd576110fd614c04565b602002602001015187848151811061111757611117614c04565b60200260200101516001600160a01b0316612fe49092919063ffffffff16565b8061114181614c48565b915050611065565b506003546201000090046001600160a01b0316331461117a5733600090815260076020526040812061117a91614739565b336001600160a01b03167ff07ac40708a36cdbc3311e096e0f0dd64d741b00090c5d161783487c2415e544826040516111b39190614a35565b60405180910390a25050600180555050565b600260015414156112065760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146112535760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1661127657604051630d02863960e41b815260040160405180910390fd5b600554156112975760405163253aa89960e21b815260040160405180910390fd5b60006112a16108b6565b92505050438114156112c6576040516301ff841d60e51b815260040160405180910390fd5b6112d08383613061565b50506001805550565b6002600154141561131a5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556003546201000090046001600160a01b031633146113505760405163f5185ed160e01b815260040160405180910390fd5b603c60095461135f9190614c30565b42101561137f57604051632843635360e01b815260040160405180910390fd5b4260098190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166355c676286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190614d8f565b905060008183116114245761141f8383614d31565b61142e565b61142e8284614d31565b90506611c37937e08000811115611468576040516380d8c52b60e01b8152600481018290526611c37937e080006024820152604401610716565b604051631c74c91760e11b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338e9922e90602401600060405180830381600087803b1580156114ca57600080fd5b505af11580156114de573d6000803e3d6000fd5b505050507fcda74150def0ede554aff5f677be9df0e226fddff9bd9ceddf732b9673b1c92d836040516108a591815260200190565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166347bc4d926040518163ffffffff1660e01b8152600401602060405180830381865afa158015611573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115979190614da8565b905090565b600260015414156115dd5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b0316331461162a5760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1661164d57604051630d02863960e41b815260040160405180910390fd5b600354610100900460ff16156116765760405163a8301b8360e01b815260040160405180910390fd5b6005546116965760405163ba92a7ed60e01b815260040160405180910390fd5b4260055411156116bf576005546040516397f6ebc760e01b815260040161071691815260200190565b6003805461ff00191661010017905560006116d8613412565b90506116ec6000546001600160a01b031690565b6001600160a01b03167fdc2a54875b2c12c509c49d8497fade5643d0547ce751bae768b9e9ae8c647480826040516117249190614a35565b60405180910390a25060018055565b600260015414156117745760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146117c15760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff166117e457604051630d02863960e41b815260040160405180910390fd5b600554156118055760405163253aa89960e21b815260040160405180910390fd5b61180f8282613061565b505060018055565b6008818154811061182757600080fd5b600091825260209091200154905081565b6000546001600160a01b031633146118805760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156118d35760405163d0cbace960e01b815260040160405180910390fd5b6118f96118e86000546001600160a01b031690565b6001600160a01b0384169083612fe4565b5050565b6000546001600160a01b031633146119455760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b604051634fdacacf60e01b815260040160405180910390fd5b6002805461196b90614dca565b80601f016020809104026020016040519081016040528092919081815260200182805461199790614dca565b80156119e45780601f106119b9576101008083540402835291602001916119e4565b820191906000526020600020905b8154815290600101906020018083116119c757829003601f168201915b505050505081565b6004546001600160a01b03163314611a1757604051637a6df06f60e01b815260040160405180910390fd5b600454611a2c906001600160a01b0316613591565b600480546001600160a01b0319169055565b60026001541415611a7f5760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b03163314611acc5760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b611ad5816135e1565b60035460ff168015611ae75750600554155b15611af457611af4612c0b565b6001600160a01b038116600090815260076020526040902054611b8b57611b19611e92565b5167ffffffffffffffff811115611b3257611b32614af9565b604051908082528060200260200182016040528015611b5b578160200160208202803683370190505b506001600160a01b03821660009081526007602090815260409091208251611b899391929190910190614757565b505b6003546040516001600160a01b038084169262010000900416907fa14fc14d8620a708a896fd11392a235647d99385500a295f0d7da2a258b2e96790600090a3600380546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff90921691909117905560018055565b6000546001600160a01b03163314611c575760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1615611c7b57604051635feef03760e01b815260040160405180910390fd5b6003805460ff19166001179055426006556000611c96611e92565b805190915060008167ffffffffffffffff811115611cb657611cb6614af9565b604051908082528060200260200182016040528015611cdf578160200160208202803683370190505b5090506000611cef868686612a1a565b905060005b83811015611d6757611d38858281518110611d1157611d11614c04565b6020026020010151838381518110611d2b57611d2b614c04565b6020026020010151613645565b838281518110611d4a57611d4a614c04565b602090810291909101015280611d5f81614c48565b915050611cf4565b5060008082604051602001611d7d929190614e1b565b60408051601f198184030181526080830182528783526020830186905282820181905260006060840152905163172b958560e31b81529092506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b95cac2890611e1b907f000000000000000000000000000000000000000000000000000000000000000090309081908790600401614e44565b600060405180830381600087803b158015611e3557600080fd5b505af1158015611e49573d6000803e3d6000fd5b50505050611e57600161294b565b5050505050505050565b60076020528160005260406000208181548110611e7d57600080fd5b90600052602060002001600091509150505481565b6060611e9c6108b6565b509092915050565b600080611eaf611ed3565b9050808381518110611ec357611ec3614c04565b6020026020010151915050919050565b6060611edd6108b6565b5092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166355c676286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f44573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115979190614d8f565b6000546001600160a01b03163314611fb05760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff16611fd357604051630d02863960e41b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b6301406120146000546001600160a01b031690565b868686866040518663ffffffff1660e01b8152600401612038959493929190614f9a565b600060405180830381600087803b15801561205257600080fd5b505af1158015611e57573d6000803e3d6000fd5b6000546001600160a01b031633146120ae5760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff166120d157604051630d02863960e41b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166347bc4d926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121539190614da8565b156121715760405163721c238360e01b815260040160405180910390fd5b600061217b611e92565b9050600061218a848484612a1a565b604051633e56920560e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633e569205906121dd90429081908690600401614d67565b600060405180830381600087803b1580156121f757600080fd5b505af115801561220b573d6000803e3d6000fd5b5050604051633806be4b60e21b8152600160048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063e01af92c9150602401600060405180830381600087803b15801561227157600080fd5b505af1158015612285573d6000803e3d6000fd5b505050507faca0f1c3f5bcb639955c1a1efad051b1ef42f86b76694900ac0ff5a8165f779d42826040516122ba9291906150b1565b60405180910390a150505050565b600260015414156123095760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146123565760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1661237957604051630d02863960e41b815260040160405180910390fd5b6005541561239a5760405163253aa89960e21b815260040160405180910390fd5b60006123a46108b6565b92505050438114156123c9576040516301ff841d60e51b815260040160405180910390fd5b6112d0838361385d565b600260015414156124145760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146124615760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff1661248457604051630d02863960e41b815260040160405180910390fd5b600554156124a55760405163253aa89960e21b815260040160405180910390fd5b6124ad612c0b565b6124d77f000000000000000000000000000000000000000000000000000000000000000042614c30565b6005556124e4600061294b565b7fa3f032386f9b5d8bac197b7631bf43c667393828263c2cece0e43b63f015cf1d60055460405161251791815260200190565b60405180910390a160018055565b600260015414156125665760405162461bcd60e51b815260206004820152601f602482015260008051602061520c8339815191526044820152606401610716565b60026001556000546001600160a01b031633146125b35760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b60035460ff166125d657604051630d02863960e41b815260040160405180910390fd5b600554156125f75760405163253aa89960e21b815260040160405180910390fd5b61180f828261385d565b6000546001600160a01b031633146126495760405162461bcd60e51b8152602060048201819052602482015260008051602061522c8339815191526044820152606401610716565b6001600160a01b03811661267057604051634616c29760e01b815260040160405180910390fd5b600480546001600160a01b0383166001600160a01b031990911681179091556126a16000546001600160a01b031690565b6001600160a01b03167fc6d61e41813bc81d93c1b08d44a36d3c91d6e3a7a76e216120c215db016490c060405160405180910390a350565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612739573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115979190810190614bcf565b600061276c83613ecf565b801561277d575061277d8383613f02565b90505b92915050565b815160008167ffffffffffffffff8111156127a3576127a3614af9565b6040519080825280602002602001820160405280156127cc578160200160208202803683370190505b5090506000805b8381101561286a5784670de0b6b3a76400008783815181106127f7576127f7614c04565b60200260200101516128099190614d48565b61281391906150ca565b83828151811061282557612825614c04565b60200260200101818152505082818151811061284357612843614c04565b6020026020010151826128569190614c30565b91508061286281614c48565b9150506127d3565b5080670de0b6b3a76400008360008151811061288857612888614c04565b602002602001015161289a9190614c30565b6128a49190614d31565b826000815181106128b7576128b7614c04565b6020908102919091010152604051633e56920560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633e5692059061291290429081908790600401614d67565b600060405180830381600087803b15801561292c57600080fd5b505af1158015612940573d6000803e3d6000fd5b505050505050505050565b604051633806be4b60e21b815281151560048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e01af92c90602401600060405180830381600087803b1580156129ae57600080fd5b505af11580156129c2573d6000803e3d6000fd5b505050507f8bcc108c7d867d0a70433f71ecba3056c4dcc48eaabe4ca987f9fb1f836091d5816040516129f9911515815260200190565b60405180910390a150565b6000818311612a13578161277d565b5090919050565b8051606090838114612a495760405163ba34664360e01b81526004810182905260248101859052604401610716565b60008167ffffffffffffffff811115612a6457612a64614af9565b604051908082528060200260200182016040528015612a8d578160200160208202803683370190505b50905060005b82811015612bb757848181518110612aad57612aad614c04565b60200260200101516001600160a01b0316878783818110612ad057612ad0614c04565b612ae69260206040909202019081019150614a05565b6001600160a01b031614612b6c57868682818110612b0657612b06614c04565b612b1c9260206040909202019081019150614a05565b858281518110612b2e57612b2e614c04565b602090810291909101015160405163030c4e0160e61b81526001600160a01b0392831660048201529116602482015260448101829052606401610716565b868682818110612b7e57612b7e614c04565b90506040020160200135828281518110612b9a57612b9a614c04565b602090810291909101015280612baf81614c48565b915050612a93565b509150505b9392505050565b6000818311612bee5782612bdf83670de0b6b3a7640000614d48565b612be991906150ca565b61277d565b81612c0184670de0b6b3a7640000614d48565b61277d91906150ca565b7f0000000000000000000000000000000000000000000000000000000000000000612c3257565b6006544211612c3d57565b606080612c486108b6565b508151919350915060008167ffffffffffffffff811115612c6b57612c6b614af9565b604051908082528060200260200182016040528015612c94578160200160208202803683370190505b50905060008267ffffffffffffffff811115612cb257612cb2614af9565b604051908082528060200260200182016040528015612cdb578160200160208202803683370190505b50905060005b83811015612e2c57858181518110612cfb57612cfb614c04565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6f9190614d8f565b828281518110612d8157612d81614c04565b602002602001018181525050670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000060065442612dc59190614d31565b878481518110612dd757612dd7614c04565b6020026020010151612de99190614d48565b612df39190614d48565b612dfd91906150ca565b838281518110612e0f57612e0f614c04565b602090810291909101015280612e2481614c48565b915050612ce1565b5042600655612e3a82614000565b60005b83811015612fdc57818181518110612e5757612e57614c04565b6020026020010151868281518110612e7157612e71614c04565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee59190614d8f565b612eef9190614d31565b838281518110612f0157612f01614c04565b602002602001018181525050828181518110612f1f57612f1f614c04565b6020908102919091018101516003546201000090046001600160a01b0316600090815260079092526040909120805483908110612f5e57612f5e614c04565b906000526020600020016000828254612f779190614c30565b92505081905550828181518110612f9057612f90614c04565b602002602001015160088281548110612fab57612fab614c04565b906000526020600020016000828254612fc49190614c30565b90915550819050612fd481614c48565b915050612e3d565b505050505050565b6040516001600160a01b03831660248201526044810182905261305c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915261405e565b505050565b613069612c0b565b6060806130746108b6565b50809250819350505060008251905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156130e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261310b9190810190614bcf565b905060008267ffffffffffffffff81111561312857613128614af9565b604051908082528060200260200182016040528015613151578160200160208202803683370190505b5090506000613161888888612a1a565b905060005b848110156131d55781818151811061318057613180614c04565b60200260200101516000146131c3576131a4878281518110611d1157611d11614c04565b8382815181106131b6576131b6614c04565b6020026020010181815250505b806131cd81614c48565b915050613166565b506131e1826002614143565b6131ec826001614143565b60006131f6611ed3565b90506000805b8681101561333b5783818151811061321657613216614c04565b60200260200101516000146133025787818151811061323757613237614c04565b602002602001015183828151811061325157613251614c04565b602002602001015187838151811061326b5761326b614c04565b602002602001015161327d9190614d48565b61328791906150ca565b86828151811061329957613299614c04565b6020026020010181815250508781815181106132b7576132b7614c04565b60200260200101518382815181106132d1576132d1614c04565b60200260200101516132e39190614d31565b8582815181106132f5576132f5614c04565b6020026020010181815250505b85818151811061331457613314614c04565b6020026020010151826133279190614c30565b91508061333381614c48565b9150506131fc565b506133468582612786565b7f778d328810650d10cb37a1ec58af34374e6eb175435d895ef712a781e6cb1b8083857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156133c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133ef9190810190614bcf565b6040516133fe939291906150ec565b60405180910390a150505050505050505050565b606080606061341f6108b6565b50815191935091508067ffffffffffffffff81111561344057613440614af9565b604051908082528060200260200182016040528015613469578160200160208202803683370190505b50935061347582614000565b60008060005b838110156135885785818151811061349557613495614c04565b60200260200101519150600881815481106134b2576134b2614c04565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015613502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135269190614d8f565b6135309190614d31565b92506135586135476000546001600160a01b031690565b6001600160a01b0384169085612fe4565b8287828151811061356b5761356b614c04565b60209081029190910101528061358081614c48565b91505061347b565b50505050505090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166136085760405163c93c257960e01b815260040160405180910390fd5b6000546001600160a01b03828116911614156136425760405163058cd72160e21b81526001600160a01b0382166004820152602401610716565b50565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa15801561368e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b29190614d8f565b90506136db6136c96000546001600160a01b031690565b6001600160a01b03861690308661437b565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a0823190602401602060405180830381865afa158015613721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137459190614d8f565b61374f9190614d31565b604051636eb1769f60e11b81523060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015291925060009186169063dd62ed3e90604401602060405180830381865afa1580156137c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e59190614d8f565b90508015613821576138216001600160a01b0386167f0000000000000000000000000000000000000000000000000000000000000000836143b9565b6138556001600160a01b0386167f0000000000000000000000000000000000000000000000000000000000000000846144e0565b509392505050565b613865612c0b565b6060806138706108b6565b50809250819350505060008251905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de242ff46040518163ffffffff1660e01b81526004016000604051808303816000875af11580156138e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139099190810190614bcf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561396b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139939190810190614bcf565b905060008367ffffffffffffffff8111156139b0576139b0614af9565b6040519080825280602002602001820160405280156139d9578160200160208202803683370190505b50905060006139e9898989612a1a565b905060005b85811015613be657868181518110613a0857613a08614c04565b6020026020010151828281518110613a2257613a22614c04565b60200260200101511180613a675750848181518110613a4357613a43614c04565b6020026020010151828281518110613a5d57613a5d614c04565b6020026020010151115b15613b0e57878181518110613a7e57613a7e614c04565b6020026020010151828281518110613a9857613a98614c04565b6020026020010151613adc898481518110613ab557613ab5614c04565b6020026020010151888581518110613acf57613acf614c04565b6020026020010151614592565b60405163bdac907560e01b81526001600160a01b03909316600484015260248301919091526044820152606401610716565b818181518110613b2057613b20614c04565b6020026020010151600014613bd457878181518110613b4157613b41614c04565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015613b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb59190614d8f565b838281518110613bc757613bc7614c04565b6020026020010181815250505b80613bde81614c48565b9150506139ee565b50613bf081614000565b6000805b86811015613e0a57828181518110613c0e57613c0e614c04565b6020026020010151600014613dd157838181518110613c2f57613c2f614c04565b6020026020010151898281518110613c4957613c49614c04565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015613c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbd9190614d8f565b613cc79190614d31565b848281518110613cd957613cd9614c04565b602002602001018181525050613d26613cfa6000546001600160a01b031690565b858381518110613d0c57613d0c614c04565b60200260200101518b848151811061111757611117614c04565b6000838281518110613d3a57613d3a614c04565b6020026020010151898381518110613d5457613d54614c04565b6020026020010151613d669190614d31565b9050888281518110613d7a57613d7a614c04565b602002602001015181878481518110613d9557613d95614c04565b6020026020010151613da79190614d48565b613db191906150ca565b868381518110613dc357613dc3614c04565b602002602001018181525050505b848181518110613de357613de3614c04565b602002602001015182613df69190614c30565b915080613e0281614c48565b915050613bf4565b50613e158482612786565b7f19b6b36dbef13cbe025e192eee2e5528d4a90ac8ce2b7519c5f527ea9803ee5e8284877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa158015613e97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ebf9190810190614bcf565b6040516133fe9493929190615125565b6000613ee2826301ffc9a760e01b613f02565b80156127805750613efb826001600160e01b0319613f02565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090613f7e908690615172565b6000604051808303818686fa925050503d8060008114613fba576040519150601f19603f3d011682016040523d82523d6000602084013e613fbf565b606091505b5091509150602081511015613fda5760009350505050612780565b818015613ff6575080806020019051810190613ff69190614da8565b9695505050505050565b6000815167ffffffffffffffff81111561401c5761401c614af9565b604051908082528060200260200182016040528015614045578160200160208202803683370190505b509050614053826000614143565b6118f9816002614143565b60006140b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145a19092919063ffffffff16565b80519091501561305c57808060200190518101906140d19190614da8565b61305c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610716565b815160008167ffffffffffffffff81111561416057614160614af9565b6040519080825280602002602001820160405280156141b257816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161417e5790505b50905060006141bf611e92565b90507f000000000000000000000000000000000000000000000000000000000000000060005b848110156142f4578584828151811061420057614200614c04565b602002602001015160000190600281111561421d5761421d614e05565b9081600281111561423057614230614e05565b815250508184828151811061424757614247614c04565b6020026020010151602001818152505082818151811061426957614269614c04565b602002602001015184828151811061428357614283614c04565b6020026020010151604001906001600160a01b031690816001600160a01b0316815250508681815181106142b9576142b9614c04565b60200260200101518482815181106142d3576142d3614c04565b602090810291909101015160600152806142ec81614c48565b9150506141e5565b50604051637362304960e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6c460929061434190869060040161518e565b600060405180830381600087803b15801561435b57600080fd5b505af115801561436f573d6000803e3d6000fd5b50505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526143b39085906323b872dd60e01b90608401613010565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015614409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061442d9190614d8f565b9050818110156144a55760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610716565b6040516001600160a01b038416602482015282820360448201819052906144d990869063095ea7b360e01b90606401613010565b5050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015614531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145559190614d8f565b61455f9190614c30565b6040516001600160a01b0385166024820152604481018290529091506143b390859063095ea7b360e01b90606401613010565b6000818310612a13578161277d565b60606145b084846000856145b8565b949350505050565b6060824710156146305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610716565b6001600160a01b0385163b6146875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610716565b600080866001600160a01b031685876040516146a39190615172565b60006040518083038185875af1925050503d80600081146146e0576040519150601f19603f3d011682016040523d82523d6000602084013e6146e5565b606091505b50915091506146f5828286614700565b979650505050505050565b6060831561470f575081612bbc565b82511561471f5782518084602001fd5b8160405162461bcd60e51b815260040161071691906149f2565b508054600082559060005260206000209081019061364291906147a2565b828054828255906000526020600020908101928215614792579160200282015b82811115614792578251825591602001919060010190614777565b5061479e9291506147a2565b5090565b5b8082111561479e57600081556001016147a3565b600081518084526020808501945080840160005b838110156147f05781516001600160a01b0316875295820195908201906001016147cb565b509495945050505050565b600081518084526020808501945080840160005b838110156147f05781518752958201959082019060010161480f565b60608152600061483e60608301866147b7565b828103602084015261485081866147fb565b915050826040830152949350505050565b60008083601f84011261487357600080fd5b50813567ffffffffffffffff81111561488b57600080fd5b6020830191508360208260061b85010111156148a657600080fd5b9250929050565b600080600080606085870312156148c357600080fd5b843567ffffffffffffffff8111156148da57600080fd5b6148e687828801614861565b90989097506020870135966040013595509350505050565b6000806020838503121561491157600080fd5b823567ffffffffffffffff81111561492857600080fd5b61493485828601614861565b90969095509350505050565b60006020828403121561495257600080fd5b5035919050565b6001600160a01b038116811461364257600080fd5b6000806040838503121561498157600080fd5b823561498c81614959565b946020939093013593505050565b60005b838110156149b557818101518382015260200161499d565b838111156143b35750506000910152565b600081518084526149de81602086016020860161499a565b601f01601f19169290920160200192915050565b60208152600061277d60208301846149c6565b600060208284031215614a1757600080fd5b8135612bbc81614959565b60208152600061277d60208301846147b7565b60208152600061277d60208301846147fb565b60008083601f840112614a5a57600080fd5b50813567ffffffffffffffff811115614a7257600080fd5b6020830191508360208260051b85010111156148a657600080fd5b60008060008060408587031215614aa357600080fd5b843567ffffffffffffffff80821115614abb57600080fd5b614ac788838901614a48565b90965094506020870135915080821115614ae057600080fd5b50614aed87828801614a48565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614b3857614b38614af9565b604052919050565b600067ffffffffffffffff821115614b5a57614b5a614af9565b5060051b60200190565b600082601f830112614b7557600080fd5b81516020614b8a614b8583614b40565b614b0f565b82815260059290921b84018101918181019086841115614ba957600080fd5b8286015b84811015614bc45780518352918301918301614bad565b509695505050505050565b600060208284031215614be157600080fd5b815167ffffffffffffffff811115614bf857600080fd5b6145b084828501614b64565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614c4357614c43614c1a565b500190565b6000600019821415614c5c57614c5c614c1a565b5060010190565b600080600060608486031215614c7857600080fd5b835167ffffffffffffffff80821115614c9057600080fd5b818601915086601f830112614ca457600080fd5b81516020614cb4614b8583614b40565b82815260059290921b8401810191818101908a841115614cd357600080fd5b948201945b83861015614cfa578551614ceb81614959565b82529482019490820190614cd8565b91890151919750909350505080821115614d1357600080fd5b50614d2086828701614b64565b925050604084015190509250925092565b600082821015614d4357614d43614c1a565b500390565b6000816000190483118215151615614d6257614d62614c1a565b500290565b838152826020820152606060408201526000614d8660608301846147fb565b95945050505050565b600060208284031215614da157600080fd5b5051919050565b600060208284031215614dba57600080fd5b81518015158114612bbc57600080fd5b600181811c90821680614dde57607f821691505b60208210811415614dff57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b600060048410614e2d57614e2d614e05565b838252604060208301526145b060408301846147fb565b848152600060206001600160a01b03808716828501528086166040850152506080606084015261010083018451608080860152818151808452610120870191508483019350600092505b80831015614eb95783516001600160a01b031682526020820191508484019350600183019250614e8e565b50838701519350607f199250828682030160a0870152614ed981856147fb565b935050506040850151818584030160c0860152614ef683826149c6565b925050506060840151614bc460e085018215159052565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614f3f57600080fd5b8260051b8083602087013760009401602001938452509192915050565b8183526000602080850194508260005b858110156147f0578135614f7f81614959565b6001600160a01b031687529582019590820190600101614f6c565b6001600160a01b0386811682526060602080840182905283820187905260009260809182860160058a901b870184018b875b8c81101561508b57898303607f190184528135368f9003609e19018112614ff257600080fd5b8e0180358452858101358685015260a060408083013561501181614959565b891690860152818a01358a8601528882013536839003601e1901811261503657600080fd5b8201803567ffffffffffffffff81111561504f57600080fd5b8060051b360384131561506157600080fd5b828b880152615075838801828b8501614f0d565b9789019796505050928601925050600101614fcc565b505087810360408901526150a0818a8c614f5c565b9d9c50505050505050505050505050565b8281526040602082015260006145b060408301846147fb565b6000826150e757634e487b7160e01b600052601260045260246000fd5b500490565b6060815260006150ff60608301866147fb565b828103602084015261511181866147fb565b90508281036040840152613ff681856147fb565b60808152600061513860808301876147fb565b828103602084015261514a81876147fb565b9050828103604084015261515e81866147fb565b905082810360608401526146f581856147fb565b6000825161518481846020870161499a565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156151fe5781518051600381106151c7576151c7614e05565b85528087015187860152858101516001600160a01b03168686015260609081015190850152608090930192908501906001016151ab565b509197965050505050505056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220de33a6e601edc52aadacdb18eb8ae8f99616071f91d71fae5af2b3ded3f4758f64736f6c634300080b0033",
  "devdoc": {
    "details": "Vault owner is the asset owner.",
    "events": {
      "CancelWeightUpdates(uint256[])": {
        "params": {
          "weights": "Current weights of tokens."
        }
      },
      "Created(address,string,string,address[],uint256[],uint256,address,address,uint256,uint256,address,string)": {
        "params": {
          "description": "Vault description.",
          "factory": "Balancer Managed Pool factory address.",
          "guardian": "Vault guardian address.",
          "managementFee": "Management fee earned proportion per second.",
          "merkleOrchard": "Merkle Orchard address.",
          "name": "Name of Pool Token.",
          "noticePeriod": "Notice period (in seconds).",
          "swapFeePercentage": "Pool swap fee.",
          "symbol": "Symbol of Pool Token.",
          "tokens": "Token addresses.",
          "validator": "Withdrawal validator contract address.",
          "weights": "Token weights."
        }
      },
      "Deposit(uint256[],uint256[],uint256[])": {
        "params": {
          "amounts": "Deposited amounts.",
          "requestedAmounts": "Requested amounts to deposit.",
          "weights": "Token weights following deposit."
        }
      },
      "DistributeGuardianFees(address,uint256[])": {
        "params": {
          "amounts": "Withdrawn amounts.",
          "guardian": "Guardian address."
        }
      },
      "EnabledTradingWithWeights(uint256,uint256[])": {
        "params": {
          "time": "timestamp of updates.",
          "weights": "Target weights of tokens."
        }
      },
      "FinalizationInitiated(uint256)": {
        "params": {
          "noticeTimeoutAt": "Timestamp for notice timeout."
        }
      },
      "Finalized(address,uint256[])": {
        "params": {
          "amounts": "Returned token amounts.",
          "caller": "Address of finalizer."
        }
      },
      "GuardianChanged(address,address)": {
        "params": {
          "guardian": "New guardian address.",
          "previousGuardian": "Previous guardian address."
        }
      },
      "OwnershipTransferCanceled(address,address)": {
        "params": {
          "canceledOwner": "Address of canceled owner.",
          "currentOwner": "Address of current owner."
        }
      },
      "OwnershipTransferOffered(address,address)": {
        "params": {
          "currentOwner": "Address of current owner.",
          "pendingOwner": "Address of pending owner."
        }
      },
      "SetSwapEnabled(bool)": {
        "params": {
          "swapEnabled": "New state of swap."
        }
      },
      "SetSwapFee(uint256)": {
        "params": {
          "swapFee": "New swap fee."
        }
      },
      "UpdateWeightsGradually(uint256,uint256,uint256[])": {
        "params": {
          "endTime": "End timestamp of updates.",
          "startTime": "Start timestamp of updates.",
          "weights": "Target weights of tokens."
        }
      },
      "Withdraw(uint256[],uint256[],uint256[],uint256[])": {
        "params": {
          "allowances": "Token withdrawal allowances.",
          "amounts": "Withdrawn amounts.",
          "requestedAmounts": "Requested amounts to withdraw.",
          "weights": "Token weights following withdrawal."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelWeightUpdates()": {
        "details": "Keep calculated weights from the schedule at the time."
      },
      "claimGuardianFees()": {
        "details": "This function shouldn't be called too frequently."
      },
      "claimRewards((uint256,uint256,address,uint256,bytes32[])[],address[])": {
        "details": "It calls claimDistributions() function of Balancer MerkleOrchard.      Once this function is called, the tokens will be transferred to      the Vault and it can be distributed via sweep function.",
        "params": {
          "claims": "An array of claims provided as a claim struct.        See https://docs.balancer.fi/products/merkle-orchard/claiming-tokens#claiming-from-the-contract-directly.",
          "tokens": "An array consisting of tokens to be claimed."
        }
      },
      "constructor": {
        "details": "Tokens should be unique. Validator should conform to interface.      These are checked by Balancer in internal transactions:       If tokens are sorted in ascending order.       If swapFeePercentage is greater than minimum and less than maximum.       If total sum of weights is one.",
        "params": {
          "vaultParams": "Struct vault parameter."
        }
      },
      "deposit((address,uint256)[])": {
        "details": "It calls updateWeights() function      which cancels current active weights change schedule.",
        "params": {
          "tokenWithAmount": "Deposit tokens with amount."
        }
      },
      "depositIfBalanceUnchanged((address,uint256)[])": {
        "details": "It calls updateWeights() function      which cancels current active weights change schedule.      It reverts if balances were updated in the current block.",
        "params": {
          "tokenWithAmount": "Deposit token with amount."
        }
      },
      "enableTradingWithWeights((address,uint256)[])": {
        "details": "These are checked by Balancer in internal transactions:       If weight length and token length match.       If total sum of weights is one.       If weight is greater than minimum.",
        "params": {
          "tokenWithWeight": "Tokens with new weights."
        }
      },
      "getHoldings()": {
        "returns": {
          "amounts": "Token balances in underlying pool"
        }
      },
      "getNormalizedWeights()": {
        "returns": {
          "_0": "Normalized weights of tokens on Balancer pool."
        }
      },
      "getSwapFee()": {
        "returns": {
          "_0": "Swap fee from underlying Balancer pool."
        }
      },
      "getTokens()": {
        "returns": {
          "tokens": "IERC20 tokens of Balancer pool."
        }
      },
      "getTokensData()": {
        "returns": {
          "_0": "IERC20 tokens of Balancer pool.",
          "_1": "Balances of tokens of Balancer pool.",
          "_2": "Last updated Blocknumber."
        }
      },
      "holding(uint256)": {
        "returns": {
          "_0": "Token balance in underlying pool."
        }
      },
      "initialDeposit((address,uint256)[])": {
        "details": "Initial deposit must be performed before      calling withdraw() or deposit() functions.      It enables trading, so weights and balances should be in line      with market spot prices, otherwise there is a significant risk      of arbitrage.      This is checked by Balancer in internal transactions:       If token amount is not zero when join pool.",
        "params": {
          "tokenWithAmount": "Deposit tokens with amount."
        }
      },
      "isSwapEnabled()": {
        "returns": {
          "_0": "If public swap is turned on, returns true, otherwise false."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "setSwapFee(uint256)": {
        "details": "These are checked by Balancer in internal transactions:       If new swap fee is less than maximum.       If new swap fee is greater than minimum."
      },
      "transferOwnership(address)": {
        "details": "It disables immediate transfer of ownership"
      },
      "updateWeightsGradually((address,uint256)[],uint256,uint256)": {
        "details": "These are checked by Balancer in internal transactions:       If target weight length and token length match.       If total sum of target weights is one.       If target weight is greater than minimum.",
        "params": {
          "endTime": "Timestamp at which the weights should reach target values.",
          "startTime": "Timestamp at which weight movement should start.",
          "tokenWithWeight": "Tokens with target weights."
        }
      },
      "withdraw((address,uint256)[])": {
        "details": "It calls updateWeights() function      which cancels current active weights change schedule.",
        "params": {
          "tokenWithAmount": "Requested tokens with amount."
        }
      },
      "withdrawIfBalanceUnchanged((address,uint256)[])": {
        "details": "It calls updateWeights() function      which cancels current active weights change schedule.      It reverts if balances were updated in the current block.",
        "params": {
          "tokenWithAmount": "Requested tokens with amount."
        }
      }
    },
    "stateVariables": {
      "MAX_MANAGEMENT_FEE": {
        "details": "0.0000001% per second, i.e. 3.1536% per year.      0.0000001% * (365 * 24 * 60 * 60) = 3.1536%"
      },
      "MAX_WEIGHT_CHANGE_RATIO": {
        "details": "It's the increment/decrement factor per one second.      increment/decrement factor per n seconds: Fn = f * n      Weight growth range for n seconds: [1 / Fn - 1, Fn - 1]      E.g. increment/decrement factor per 2000 seconds is 2      Weight growth range for 2000 seconds is [-50%, 100%]"
      },
      "UNSET_GUARDIAN_ADDRESS": {
        "details": "Address to represent unset guardian in events."
      },
      "description": {
        "details": "string cannot be immutable bytecode but only set in constructor"
      },
      "managementFee": {
        "details": "10**18 is 100%"
      }
    },
    "title": "Risk-managed treasury vault.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Aera__ValueLengthIsNotSame(uint256,uint256)": [
        {
          "notice": "ERRORS ///"
        }
      ]
    },
    "events": {
      "CancelWeightUpdates(uint256[])": {
        "notice": "Emitted when cancelWeightUpdates is called."
      },
      "Created(address,string,string,address[],uint256[],uint256,address,address,uint256,uint256,address,string)": {
        "notice": "Emitted when the vault is created."
      },
      "Deposit(uint256[],uint256[],uint256[])": {
        "notice": "Emitted when tokens are deposited."
      },
      "DistributeGuardianFees(address,uint256[])": {
        "notice": "Emitted when management fees are withdrawn."
      },
      "EnabledTradingWithWeights(uint256,uint256[])": {
        "notice": "Emitted when enableTradingWithWeights is called."
      },
      "FinalizationInitiated(uint256)": {
        "notice": "Emitted when initiateFinalization is called."
      },
      "Finalized(address,uint256[])": {
        "notice": "Emitted when vault is finalized."
      },
      "GuardianChanged(address,address)": {
        "notice": "Emitted when guardian is changed."
      },
      "OwnershipTransferCanceled(address,address)": {
        "notice": "Emitted when cancelOwnershipTransfer is called."
      },
      "OwnershipTransferOffered(address,address)": {
        "notice": "Emitted when transferOwnership is called."
      },
      "SetSwapEnabled(bool)": {
        "notice": "Emitted when swap is enabled/disabled."
      },
      "SetSwapFee(uint256)": {
        "notice": "Emitted when swap fee is updated."
      },
      "UpdateWeightsGradually(uint256,uint256,uint256[])": {
        "notice": "Emitted when updateWeightsGradually is called."
      },
      "Withdraw(uint256[],uint256[],uint256[],uint256[])": {
        "notice": "Emitted when tokens are withdrawn."
      }
    },
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accept ownership"
      },
      "bVault()": {
        "notice": "Balancer Vault."
      },
      "cancelOwnershipTransfer()": {
        "notice": "Cancel current pending ownership transfer"
      },
      "cancelWeightUpdates()": {
        "notice": "Cancel the active weight update schedule."
      },
      "claimGuardianFees()": {
        "notice": "Claim guardian fee."
      },
      "claimRewards((uint256,uint256,address,uint256,bytes32[])[],address[])": {
        "notice": "Claim Balancer rewards."
      },
      "constructor": {
        "notice": "Initialize the contract by deploying new Balancer pool using the provided factory."
      },
      "deposit((address,uint256)[])": {
        "notice": "Deposit tokens into vault."
      },
      "depositIfBalanceUnchanged((address,uint256)[])": {
        "notice": "Deposit tokens into vault."
      },
      "description()": {
        "notice": "Describes vault purpose and modelling assumptions for differentiating between vaults"
      },
      "disableTrading()": {
        "notice": "Disable swap."
      },
      "enableTradingRiskingArbitrage()": {
        "notice": "Enable swap with current weights."
      },
      "enableTradingWithWeights((address,uint256)[])": {
        "notice": "Enable swap with updating weights."
      },
      "finalize()": {
        "notice": "Destroy vault and returns all funds to treasury owner."
      },
      "finalized()": {
        "notice": "Indicates that the Vault has been finalized"
      },
      "getHoldings()": {
        "notice": "Underlying token balances."
      },
      "getNormalizedWeights()": {
        "notice": "Get token weights."
      },
      "getSwapFee()": {
        "notice": "Get swap fee."
      },
      "getTokens()": {
        "notice": "Get IERC20 Tokens Balancer Pool."
      },
      "getTokensData()": {
        "notice": "Get Token Data of Balancer Pool."
      },
      "guardian()": {
        "notice": "Controls vault parameters."
      },
      "guardiansFee(address,uint256)": {
        "notice": "Fee earned amount for each guardian"
      },
      "guardiansFeeTotal(uint256)": {
        "notice": "Total guardian fee earned amount"
      },
      "holding(uint256)": {
        "notice": "Balance of token with given index."
      },
      "initialDeposit((address,uint256)[])": {
        "notice": "Initialize Vault with first deposit."
      },
      "initialized()": {
        "notice": "Indicates that the Vault has been initialized"
      },
      "initiateFinalization()": {
        "notice": "Initiate vault destruction and return all funds to treasury owner."
      },
      "isSwapEnabled()": {
        "notice": "Check if vault trading is enabled."
      },
      "lastFeeCheckpoint()": {
        "notice": "Last timestamp where guardian fee index was locked."
      },
      "lastSwapFeeCheckpoint()": {
        "notice": "Last timestamp where swap fee was updated."
      },
      "managementFee()": {
        "notice": "Management fee earned proportion per second."
      },
      "merkleOrchard()": {
        "notice": "Balancer Merkle Orchard."
      },
      "noticePeriod()": {
        "notice": "Notice period for vault termination (in seconds)."
      },
      "noticeTimeoutAt()": {
        "notice": "Timestamp when notice elapses or 0 if not yet set"
      },
      "pendingOwner()": {
        "notice": "Pending account to accept ownership of vault."
      },
      "pool()": {
        "notice": "Balancer Managed Pool."
      },
      "poolController()": {
        "notice": "Balancer Managed Pool Controller."
      },
      "poolId()": {
        "notice": "Pool ID of Balancer pool on Vault."
      },
      "renounceOwnership()": {
        "notice": "Disable ownership renounceable"
      },
      "setGuardian(address)": {
        "notice": "Change guardian."
      },
      "setSwapFee(uint256)": {
        "notice": "Change swap fee."
      },
      "sweep(address,uint256)": {
        "notice": "Withdraw any tokens accidentally sent to vault."
      },
      "transferOwnership(address)": {
        "notice": "Offer ownership to another address"
      },
      "updateWeightsGradually((address,uint256)[],uint256,uint256)": {
        "notice": "Initiate weight move to target in given update window."
      },
      "validator()": {
        "notice": "Verifies withdraw limits."
      },
      "withdraw((address,uint256)[])": {
        "notice": "Withdraw tokens up to requested amounts."
      },
      "withdrawIfBalanceUnchanged((address,uint256)[])": {
        "notice": "Withdraw tokens up to requested amounts."
      }
    },
    "notice": "Managed n-asset vault that supports withdrawals         in line with a pre-defined validator contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6684,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6884,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 98,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "description",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 101,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 104,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "finalized",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 107,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "guardian",
        "offset": 2,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 110,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 113,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "noticeTimeoutAt",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 121,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "lastFeeCheckpoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 127,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "guardiansFee",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 131,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "guardiansFeeTotal",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 134,
        "contract": "contracts/v1/AeraVaultV1.sol:AeraVaultV1",
        "label": "lastSwapFeeCheckpoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}