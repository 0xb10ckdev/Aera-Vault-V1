{
  "language": "Solidity",
  "sources": {
    "contracts/v1/AeraVaultV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"./dependencies/openzeppelin/SafeERC20.sol\";\nimport \"./dependencies/openzeppelin/IERC20.sol\";\nimport \"./dependencies/openzeppelin/Ownable.sol\";\nimport \"./dependencies/openzeppelin/ReentrancyGuard.sol\";\nimport \"./dependencies/openzeppelin/Math.sol\";\nimport \"./dependencies/openzeppelin/ERC165Checker.sol\";\nimport \"./interfaces/IBManagedPoolFactory.sol\";\nimport \"./interfaces/IBManagedPoolController.sol\";\nimport \"./interfaces/IBMerkleOrchard.sol\";\nimport \"./interfaces/IBVault.sol\";\nimport \"./interfaces/IBManagedPool.sol\";\nimport \"./interfaces/IAeraVaultV1.sol\";\nimport \"./interfaces/IWithdrawalValidator.sol\";\n\n/// @title Risk-managed treasury vault.\n/// @notice Managed n-asset vault that supports withdrawals\n///         in line with a pre-defined validator contract.\n/// @dev Vault owner is the asset owner.\ncontract AeraVaultV1 is IAeraVaultV1, Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    /// STORAGE ///\n\n    uint256 internal constant ONE = 10**18;\n\n    /// @notice Minimum period for weight change duration.\n    uint256 private constant MINIMUM_WEIGHT_CHANGE_DURATION = 4 hours;\n\n    /// @notice Maximum absolute change in swap fee.\n    uint256 private constant MAXIMUM_SWAP_FEE_PERCENT_CHANGE = 0.005e18;\n\n    /// @dev Address to represent unset guardian in events.\n    address private constant UNSET_GUARDIAN_ADDRESS = address(0);\n\n    /// @notice Largest possible notice period for vault termination (2 months).\n    uint256 private constant MAX_NOTICE_PERIOD = 60 days;\n\n    /// @notice Cooldown period for updating swap fee (1 minute).\n    uint256 private constant SWAP_FEE_COOLDOWN_PERIOD = 1 minutes;\n\n    /// @notice Largest possible weight change ratio per one second.\n    /// @dev It's the increment/decrement factor per one second.\n    ///      increment/decrement factor per n seconds: Fn = f * n\n    ///      Weight growth range for n seconds: [1 / Fn - 1, Fn - 1]\n    ///      E.g. increment/decrement factor per 2000 seconds is 2\n    ///      Weight growth range for 2000 seconds is [-50%, 100%]\n    uint256 private constant MAX_WEIGHT_CHANGE_RATIO = 10**16;\n\n    /// @notice Largest management fee earned proportion per one second.\n    /// @dev 0.0000001% per second, i.e. 3.1536% per year.\n    ///      0.0000001% * (365 * 24 * 60 * 60) = 3.1536%\n    uint256 private constant MAX_MANAGEMENT_FEE = 10**9;\n\n    /// @notice Balancer Vault.\n    IBVault public immutable bVault;\n\n    /// @notice Balancer Managed Pool.\n    IBManagedPool public immutable pool;\n\n    /// @notice Balancer Managed Pool Controller.\n    IBManagedPoolController public immutable poolController;\n\n    /// @notice Balancer Merkle Orchard.\n    IBMerkleOrchard public immutable merkleOrchard;\n\n    /// @notice Pool ID of Balancer pool on Vault.\n    bytes32 public immutable poolId;\n\n    /// @notice Notice period for vault termination (in seconds).\n    uint256 public immutable noticePeriod;\n\n    /// @notice Verifies withdraw limits.\n    IWithdrawalValidator public immutable validator;\n\n    /// @notice Management fee earned proportion per second.\n    /// @dev 10**18 is 100%\n    uint256 public immutable managementFee;\n\n    /// STORAGE SLOT START ///\n\n    /// @notice Describes vault purpose and modelling assumptions for differentiating between vaults\n    /// @dev string cannot be immutable bytecode but only set in constructor\n    // slither-disable-next-line immutable-states\n    string public description;\n\n    /// @notice Indicates that the Vault has been initialized\n    bool public initialized;\n\n    /// @notice Indicates that the Vault has been finalized\n    bool public finalized;\n\n    /// @notice Controls vault parameters.\n    address public guardian;\n\n    /// @notice Pending account to accept ownership of vault.\n    address public pendingOwner;\n\n    /// @notice Timestamp when notice elapses or 0 if not yet set\n    uint256 public noticeTimeoutAt;\n\n    /// @notice Last timestamp where guardian fee index was locked.\n    uint256 public lastFeeCheckpoint = type(uint256).max;\n\n    /// @notice Fee earned amount for each guardian\n    mapping(address => uint256[]) public guardiansFee;\n\n    /// @notice Total guardian fee earned amount\n    uint256[] public guardiansFeeTotal;\n\n    /// @notice Last timestamp where swap fee was updated.\n    uint256 public lastSwapFeeCheckpoint;\n\n    /// EVENTS ///\n\n    /// @notice Emitted when the vault is created.\n    /// @param factory Balancer Managed Pool factory address.\n    /// @param name Name of Pool Token.\n    /// @param symbol Symbol of Pool Token.\n    /// @param tokens Token addresses.\n    /// @param weights Token weights.\n    /// @param swapFeePercentage Pool swap fee.\n    /// @param guardian Vault guardian address.\n    /// @param validator Withdrawal validator contract address.\n    /// @param noticePeriod Notice period (in seconds).\n    /// @param managementFee Management fee earned proportion per second.\n    /// @param merkleOrchard Merkle Orchard address.\n    /// @param description Vault description.\n    event Created(\n        address indexed factory,\n        string name,\n        string symbol,\n        IERC20[] tokens,\n        uint256[] weights,\n        uint256 swapFeePercentage,\n        address indexed guardian,\n        address indexed validator,\n        uint256 noticePeriod,\n        uint256 managementFee,\n        address merkleOrchard,\n        string description\n    );\n\n    /// @notice Emitted when tokens are deposited.\n    /// @param requestedAmounts Requested amounts to deposit.\n    /// @param amounts Deposited amounts.\n    /// @param weights Token weights following deposit.\n    event Deposit(\n        uint256[] requestedAmounts,\n        uint256[] amounts,\n        uint256[] weights\n    );\n\n    /// @notice Emitted when tokens are withdrawn.\n    /// @param requestedAmounts Requested amounts to withdraw.\n    /// @param amounts Withdrawn amounts.\n    /// @param allowances Token withdrawal allowances.\n    /// @param weights Token weights following withdrawal.\n    event Withdraw(\n        uint256[] requestedAmounts,\n        uint256[] amounts,\n        uint256[] allowances,\n        uint256[] weights\n    );\n\n    /// @notice Emitted when management fees are withdrawn.\n    /// @param guardian Guardian address.\n    /// @param amounts Withdrawn amounts.\n    event DistributeGuardianFees(address indexed guardian, uint256[] amounts);\n\n    /// @notice Emitted when guardian is changed.\n    /// @param previousGuardian Previous guardian address.\n    /// @param guardian New guardian address.\n    event GuardianChanged(\n        address indexed previousGuardian,\n        address indexed guardian\n    );\n\n    /// @notice Emitted when updateWeightsGradually is called.\n    /// @param startTime Start timestamp of updates.\n    /// @param endTime End timestamp of updates.\n    /// @param weights Target weights of tokens.\n    event UpdateWeightsGradually(\n        uint256 startTime,\n        uint256 endTime,\n        uint256[] weights\n    );\n\n    /// @notice Emitted when cancelWeightUpdates is called.\n    /// @param weights Current weights of tokens.\n    event CancelWeightUpdates(uint256[] weights);\n\n    /// @notice Emitted when swap is enabled/disabled.\n    /// @param swapEnabled New state of swap.\n    event SetSwapEnabled(bool swapEnabled);\n\n    /// @notice Emitted when enableTradingWithWeights is called.\n    /// @param time timestamp of updates.\n    /// @param weights Target weights of tokens.\n    event EnabledTradingWithWeights(uint256 time, uint256[] weights);\n\n    /// @notice Emitted when swap fee is updated.\n    /// @param swapFee New swap fee.\n    event SetSwapFee(uint256 swapFee);\n\n    /// @notice Emitted when initiateFinalization is called.\n    /// @param noticeTimeoutAt Timestamp for notice timeout.\n    event FinalizationInitiated(uint256 noticeTimeoutAt);\n\n    /// @notice Emitted when vault is finalized.\n    /// @param caller Address of finalizer.\n    /// @param amounts Returned token amounts.\n    event Finalized(address indexed caller, uint256[] amounts);\n\n    /// @notice Emitted when transferOwnership is called.\n    /// @param currentOwner Address of current owner.\n    /// @param pendingOwner Address of pending owner.\n    event OwnershipTransferOffered(\n        address indexed currentOwner,\n        address indexed pendingOwner\n    );\n\n    /// @notice Emitted when cancelOwnershipTransfer is called.\n    /// @param currentOwner Address of current owner.\n    /// @param canceledOwner Address of canceled owner.\n    event OwnershipTransferCanceled(\n        address indexed currentOwner,\n        address indexed canceledOwner\n    );\n\n    /// ERRORS ///\n\n    error Aera__ValueLengthIsNotSame(uint256 numTokens, uint256 numValues);\n    error Aera__DifferentTokensInPosition(\n        address actual,\n        address sortedToken,\n        uint256 index\n    );\n    error Aera__ValidatorIsNotMatched(\n        uint256 numTokens,\n        uint256 numAllowances\n    );\n    error Aera__ValidatorIsNotValid(address validator);\n    error Aera__ManagementFeeIsAboveMax(uint256 actual, uint256 max);\n    error Aera__NoticePeriodIsAboveMax(uint256 actual, uint256 max);\n    error Aera__NoticeTimeoutNotElapsed(uint256 noticeTimeoutAt);\n    error Aera__GuardianIsZeroAddress();\n    error Aera__GuardianIsOwner(address newGuardian);\n    error Aera__CallerIsNotGuardian();\n    error Aera__SwapFeePercentageChangeIsAboveMax(uint256 actual, uint256 max);\n    error Aera__DescriptionIsEmpty();\n    error Aera__CallerIsNotOwnerOrGuardian();\n    error Aera__WeightChangeEndBeforeStart();\n    error Aera__WeightChangeStartTimeIsAboveMax(uint256 actual, uint256 max);\n    error Aera__WeightChangeEndTimeIsAboveMax(uint256 actual, uint256 max);\n    error Aera__WeightChangeDurationIsBelowMin(uint256 actual, uint256 min);\n    error Aera__WeightChangeRatioIsAboveMax(\n        address token,\n        uint256 actual,\n        uint256 max\n    );\n    error Aera__WeightIsAboveMax(uint256 actual, uint256 max);\n    error Aera__WeightIsBelowMin(uint256 actual, uint256 min);\n    error Aera__AmountIsBelowMin(uint256 actual, uint256 min);\n    error Aera__AmountExceedAvailable(\n        address token,\n        uint256 amount,\n        uint256 available\n    );\n    error Aera__NoAvailableFeeForCaller(address caller);\n    error Aera__BalanceChangedInCurrentBlock();\n    error Aera__CannotSweepPoolToken();\n    error Aera__PoolSwapIsAlreadyEnabled();\n    error Aera__CannotSetSwapFeeBeforeCooldown();\n    error Aera__FinalizationNotInitiated();\n    error Aera__VaultNotInitialized();\n    error Aera__VaultIsAlreadyInitialized();\n    error Aera__VaultIsFinalizing();\n    error Aera__VaultIsAlreadyFinalized();\n    error Aera__VaultIsNotRenounceable();\n    error Aera__OwnerIsZeroAddress();\n    error Aera__NotPendingOwner();\n    error Aera__NoPendingOwnershipTransfer();\n\n    /// MODIFIERS ///\n\n    /// @dev Throws if called by any account other than the guardian.\n    modifier onlyGuardian() {\n        if (msg.sender != guardian) {\n            revert Aera__CallerIsNotGuardian();\n        }\n        _;\n    }\n\n    /// @dev Throws if called by any account other than the owner or guardian.\n    modifier onlyOwnerOrGuardian() {\n        if (msg.sender != owner() && msg.sender != guardian) {\n            revert Aera__CallerIsNotOwnerOrGuardian();\n        }\n        _;\n    }\n\n    /// @dev Throws if called before vault is initialized.\n    modifier whenInitialized() {\n        if (!initialized) {\n            revert Aera__VaultNotInitialized();\n        }\n        _;\n    }\n\n    /// @dev Throws if called before finalization is initiated.\n    modifier whenNotFinalizing() {\n        if (noticeTimeoutAt != 0) {\n            revert Aera__VaultIsFinalizing();\n        }\n        _;\n    }\n\n    /// FUNCTIONS ///\n\n    /// @notice Initialize the contract by deploying new Balancer pool using the provided factory.\n    /// @dev Tokens should be unique. Validator should conform to interface.\n    ///      These are checked by Balancer in internal transactions:\n    ///       If tokens are sorted in ascending order.\n    ///       If swapFeePercentage is greater than minimum and less than maximum.\n    ///       If total sum of weights is one.\n    /// @param vaultParams Struct vault parameter.\n    constructor(NewVaultParams memory vaultParams) {\n        uint256 numTokens = vaultParams.tokens.length;\n\n        if (numTokens != vaultParams.weights.length) {\n            revert Aera__ValueLengthIsNotSame(\n                numTokens,\n                vaultParams.weights.length\n            );\n        }\n        if (\n            !ERC165Checker.supportsInterface(\n                vaultParams.validator,\n                type(IWithdrawalValidator).interfaceId\n            )\n        ) {\n            revert Aera__ValidatorIsNotValid(vaultParams.validator);\n        }\n        // Use new block to avoid stack too deep issue\n        {\n            uint256 numAllowances = IWithdrawalValidator(vaultParams.validator)\n                .allowance()\n                .length;\n            if (numTokens != numAllowances) {\n                revert Aera__ValidatorIsNotMatched(numTokens, numAllowances);\n            }\n        }\n        if (vaultParams.managementFee > MAX_MANAGEMENT_FEE) {\n            revert Aera__ManagementFeeIsAboveMax(\n                vaultParams.managementFee,\n                MAX_MANAGEMENT_FEE\n            );\n        }\n        if (vaultParams.noticePeriod > MAX_NOTICE_PERIOD) {\n            revert Aera__NoticePeriodIsAboveMax(\n                vaultParams.noticePeriod,\n                MAX_NOTICE_PERIOD\n            );\n        }\n\n        if (bytes(vaultParams.description).length == 0) {\n            revert Aera__DescriptionIsEmpty();\n        }\n        checkGuardianAddress(vaultParams.guardian);\n\n        address[] memory assetManagers = new address[](numTokens);\n        for (uint256 i = 0; i < numTokens; i++) {\n            assetManagers[i] = address(this);\n        }\n\n        // Deploys a new ManagedPool from ManagedPoolFactory\n        // create(\n        //     ManagedPool.NewPoolParams memory poolParams,\n        //     BasePoolController.BasePoolRights calldata basePoolRights,\n        //     ManagedPoolController.ManagedPoolRights calldata managedPoolRights,\n        //     uint256 minWeightChangeDuration,\n        // )\n        //\n        // - poolParams.mustAllowlistLPs should be true to prevent other accounts\n        //   to use joinPool\n        // - minWeightChangeDuration should be zero so that weights can be updated immediately\n        //   in deposit, withdraw, cancelWeightUpdates and enableTradingWithWeights.\n        pool = IBManagedPool(\n            IBManagedPoolFactory(vaultParams.factory).create(\n                IBManagedPoolFactory.NewPoolParams({\n                    vault: IBVault(address(0)),\n                    name: vaultParams.name,\n                    symbol: vaultParams.symbol,\n                    tokens: vaultParams.tokens,\n                    normalizedWeights: vaultParams.weights,\n                    assetManagers: assetManagers,\n                    swapFeePercentage: vaultParams.swapFeePercentage,\n                    pauseWindowDuration: 0,\n                    bufferPeriodDuration: 0,\n                    owner: address(this),\n                    swapEnabledOnStart: false,\n                    mustAllowlistLPs: true,\n                    managementSwapFeePercentage: 0\n                }),\n                IBManagedPoolFactory.BasePoolRights({\n                    canTransferOwnership: false,\n                    canChangeSwapFee: true,\n                    canUpdateMetadata: false\n                }),\n                IBManagedPoolFactory.ManagedPoolRights({\n                    canChangeWeights: true,\n                    canDisableSwaps: true,\n                    canSetMustAllowlistLPs: false,\n                    canSetCircuitBreakers: false,\n                    canChangeTokens: false\n                }),\n                0\n            )\n        );\n\n        // slither-disable-next-line reentrancy-benign\n        bVault = pool.getVault();\n        poolController = IBManagedPoolController(pool.getOwner());\n        merkleOrchard = IBMerkleOrchard(vaultParams.merkleOrchard);\n        poolId = pool.getPoolId();\n        guardian = vaultParams.guardian;\n        validator = IWithdrawalValidator(vaultParams.validator);\n        noticePeriod = vaultParams.noticePeriod;\n        description = vaultParams.description;\n        managementFee = vaultParams.managementFee;\n        guardiansFee[guardian] = new uint256[](numTokens);\n        guardiansFeeTotal = new uint256[](numTokens);\n\n        // slither-disable-next-line reentrancy-events\n        emit Created(\n            vaultParams.factory,\n            vaultParams.name,\n            vaultParams.symbol,\n            vaultParams.tokens,\n            vaultParams.weights,\n            vaultParams.swapFeePercentage,\n            vaultParams.guardian,\n            vaultParams.validator,\n            vaultParams.noticePeriod,\n            vaultParams.managementFee,\n            vaultParams.merkleOrchard,\n            vaultParams.description\n        );\n        // slither-disable-next-line reentrancy-events\n        emit GuardianChanged(UNSET_GUARDIAN_ADDRESS, vaultParams.guardian);\n    }\n\n    /// PROTOCOL API ///\n\n    /// @inheritdoc IProtocolAPI\n    function initialDeposit(TokenValue[] calldata tokenWithAmount)\n        external\n        override\n        onlyOwner\n    {\n        if (initialized) {\n            revert Aera__VaultIsAlreadyInitialized();\n        }\n\n        initialized = true;\n        lastFeeCheckpoint = block.timestamp;\n\n        IERC20[] memory tokens = getTokens();\n        uint256 numTokens = tokens.length;\n        uint256[] memory balances = new uint256[](numTokens);\n        uint256[] memory amounts = getValuesFromTokenWithValues(\n            tokenWithAmount,\n            tokens\n        );\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            balances[i] = depositToken(tokens[i], amounts[i]);\n        }\n\n        bytes memory initUserData = abi.encode(IBVault.JoinKind.INIT, amounts);\n\n        IBVault.JoinPoolRequest memory joinPoolRequest = IBVault\n            .JoinPoolRequest({\n                assets: tokens,\n                maxAmountsIn: balances,\n                userData: initUserData,\n                fromInternalBalance: false\n            });\n        bVault.joinPool(poolId, address(this), address(this), joinPoolRequest);\n\n        setSwapEnabled(true);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    function deposit(TokenValue[] calldata tokenWithAmount)\n        external\n        override\n        nonReentrant\n        onlyOwner\n        whenInitialized\n        whenNotFinalizing\n    {\n        depositTokens(tokenWithAmount);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    // slither-disable-next-line incorrect-equality\n    function depositIfBalanceUnchanged(TokenValue[] calldata tokenWithAmount)\n        external\n        override\n        nonReentrant\n        onlyOwner\n        whenInitialized\n        whenNotFinalizing\n    {\n        (, , uint256 lastChangeBlock) = getTokensData();\n\n        if (lastChangeBlock == block.number) {\n            revert Aera__BalanceChangedInCurrentBlock();\n        }\n\n        depositTokens(tokenWithAmount);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    function withdraw(TokenValue[] calldata tokenWithAmount)\n        external\n        override\n        nonReentrant\n        onlyOwner\n        whenInitialized\n        whenNotFinalizing\n    {\n        withdrawTokens(tokenWithAmount);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    // slither-disable-next-line incorrect-equality\n    function withdrawIfBalanceUnchanged(TokenValue[] calldata tokenWithAmount)\n        external\n        override\n        nonReentrant\n        onlyOwner\n        whenInitialized\n        whenNotFinalizing\n    {\n        (, , uint256 lastChangeBlock) = getTokensData();\n\n        if (lastChangeBlock == block.number) {\n            revert Aera__BalanceChangedInCurrentBlock();\n        }\n\n        withdrawTokens(tokenWithAmount);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    function initiateFinalization()\n        external\n        override\n        nonReentrant\n        onlyOwner\n        whenInitialized\n        whenNotFinalizing\n    {\n        lockGuardianFees();\n        // slither-disable-next-line reentrancy-no-eth\n        noticeTimeoutAt = block.timestamp + noticePeriod;\n        setSwapEnabled(false);\n        emit FinalizationInitiated(noticeTimeoutAt);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    // slither-disable-next-line timestamp\n    function finalize()\n        external\n        override\n        nonReentrant\n        onlyOwner\n        whenInitialized\n    {\n        if (finalized) {\n            revert Aera__VaultIsAlreadyFinalized();\n        }\n        if (noticeTimeoutAt == 0) {\n            revert Aera__FinalizationNotInitiated();\n        }\n        if (noticeTimeoutAt > block.timestamp) {\n            revert Aera__NoticeTimeoutNotElapsed(noticeTimeoutAt);\n        }\n\n        finalized = true;\n\n        uint256[] memory amounts = returnFunds();\n        emit Finalized(owner(), amounts);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    // slither-disable-next-line timestamp\n    function setGuardian(address newGuardian)\n        external\n        override\n        nonReentrant\n        onlyOwner\n    {\n        checkGuardianAddress(newGuardian);\n\n        if (initialized && noticeTimeoutAt == 0) {\n            lockGuardianFees();\n        }\n\n        if (guardiansFee[newGuardian].length == 0) {\n            // slither-disable-next-line reentrancy-no-eth\n            guardiansFee[newGuardian] = new uint256[](getTokens().length);\n        }\n\n        // slither-disable-next-line reentrancy-events\n        emit GuardianChanged(guardian, newGuardian);\n\n        // slither-disable-next-line missing-zero-check\n        guardian = newGuardian;\n    }\n\n    /// @inheritdoc IProtocolAPI\n    // prettier-ignore\n    function sweep(address token, uint256 amount)\n        external\n        override\n        onlyOwner\n    {\n        if (token == address(pool)) {\n            revert Aera__CannotSweepPoolToken();\n        }\n        IERC20(token).safeTransfer(owner(), amount);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    function enableTradingRiskingArbitrage()\n        external\n        override\n        onlyOwner\n        whenInitialized\n    {\n        setSwapEnabled(true);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    function enableTradingWithWeights(TokenValue[] calldata tokenWithWeight)\n        external\n        override\n        onlyOwner\n        whenInitialized\n    {\n        if (pool.getSwapEnabled()) {\n            revert Aera__PoolSwapIsAlreadyEnabled();\n        }\n\n        IERC20[] memory tokens = getTokens();\n\n        uint256[] memory weights = getValuesFromTokenWithValues(\n            tokenWithWeight,\n            tokens\n        );\n\n        poolController.updateWeightsGradually(\n            block.timestamp,\n            block.timestamp,\n            weights\n        );\n        poolController.setSwapEnabled(true);\n        // slither-disable-next-line reentrancy-events\n        emit EnabledTradingWithWeights(block.timestamp, weights);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    function disableTrading()\n        external\n        override\n        onlyOwnerOrGuardian\n        whenInitialized\n    {\n        setSwapEnabled(false);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    // prettier-ignore\n    function claimRewards(\n        IBMerkleOrchard.Claim[] calldata claims,\n        IERC20[] calldata tokens\n    )\n        external\n        override\n        onlyOwner\n        whenInitialized\n    {\n        merkleOrchard.claimDistributions(owner(), claims, tokens);\n    }\n\n    /// GUARDIAN API ///\n\n    /// @inheritdoc IGuardianAPI\n    // slither-disable-next-line timestamp\n    function updateWeightsGradually(\n        TokenValue[] calldata tokenWithWeight,\n        uint256 startTime,\n        uint256 endTime\n    )\n        external\n        override\n        nonReentrant\n        onlyGuardian\n        whenInitialized\n        whenNotFinalizing\n    {\n        // These are to protect against the following vulnerability\n        // https://forum.balancer.fi/t/vulnerability-disclosure/3179\n        if (startTime > type(uint32).max) {\n            revert Aera__WeightChangeStartTimeIsAboveMax(\n                startTime,\n                type(uint32).max\n            );\n        }\n        if (endTime > type(uint32).max) {\n            revert Aera__WeightChangeEndTimeIsAboveMax(\n                endTime,\n                type(uint32).max\n            );\n        }\n\n        startTime = Math.max(block.timestamp, startTime);\n        if (startTime > endTime) {\n            revert Aera__WeightChangeEndBeforeStart();\n        }\n        if (startTime + MINIMUM_WEIGHT_CHANGE_DURATION > endTime) {\n            revert Aera__WeightChangeDurationIsBelowMin(\n                endTime - startTime,\n                MINIMUM_WEIGHT_CHANGE_DURATION\n            );\n        }\n\n        // Check if weight change ratio is exceeded\n        uint256[] memory weights = pool.getNormalizedWeights();\n        IERC20[] memory tokens = getTokens();\n        uint256 numTokens = tokens.length;\n        uint256[] memory targetWeights = getValuesFromTokenWithValues(\n            tokenWithWeight,\n            tokens\n        );\n        uint256 duration = endTime - startTime;\n        uint256 maximumRatio = MAX_WEIGHT_CHANGE_RATIO * duration;\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            uint256 changeRatio = getWeightChangeRatio(\n                weights[i],\n                targetWeights[i]\n            );\n\n            if (changeRatio > maximumRatio) {\n                revert Aera__WeightChangeRatioIsAboveMax(\n                    address(tokens[i]),\n                    changeRatio,\n                    maximumRatio\n                );\n            }\n        }\n\n        poolController.updateWeightsGradually(\n            startTime,\n            endTime,\n            targetWeights\n        );\n\n        // slither-disable-next-line reentrancy-events\n        emit UpdateWeightsGradually(startTime, endTime, targetWeights);\n    }\n\n    /// @inheritdoc IGuardianAPI\n    function cancelWeightUpdates()\n        external\n        override\n        nonReentrant\n        onlyGuardian\n        whenInitialized\n        whenNotFinalizing\n    {\n        uint256[] memory weights = pool.getNormalizedWeights();\n        uint256 numWeights = weights.length;\n        uint256 weightSum;\n\n        for (uint256 i = 0; i < numWeights; i++) {\n            weightSum += weights[i];\n        }\n\n        updateWeights(weights, weightSum);\n\n        // slither-disable-next-line reentrancy-events\n        emit CancelWeightUpdates(weights);\n    }\n\n    /// @inheritdoc IGuardianAPI\n    // slither-disable-next-line timestamp\n    function setSwapFee(uint256 newSwapFee)\n        external\n        override\n        nonReentrant\n        onlyGuardian\n    {\n        if (\n            block.timestamp < lastSwapFeeCheckpoint + SWAP_FEE_COOLDOWN_PERIOD\n        ) {\n            revert Aera__CannotSetSwapFeeBeforeCooldown();\n        }\n        lastSwapFeeCheckpoint = block.timestamp;\n\n        uint256 oldSwapFee = pool.getSwapFeePercentage();\n\n        uint256 absoluteDelta = (newSwapFee > oldSwapFee)\n            ? newSwapFee - oldSwapFee\n            : oldSwapFee - newSwapFee;\n        if (absoluteDelta > MAXIMUM_SWAP_FEE_PERCENT_CHANGE) {\n            revert Aera__SwapFeePercentageChangeIsAboveMax(\n                absoluteDelta,\n                MAXIMUM_SWAP_FEE_PERCENT_CHANGE\n            );\n        }\n\n        poolController.setSwapFeePercentage(newSwapFee);\n        // slither-disable-next-line reentrancy-events\n        emit SetSwapFee(newSwapFee);\n    }\n\n    /// @inheritdoc IGuardianAPI\n    function claimGuardianFees()\n        external\n        override\n        nonReentrant\n        whenInitialized\n        whenNotFinalizing\n    {\n        if (msg.sender == guardian) {\n            lockGuardianFees();\n        }\n\n        if (guardiansFee[msg.sender].length == 0) {\n            revert Aera__NoAvailableFeeForCaller(msg.sender);\n        }\n\n        IERC20[] memory tokens;\n        uint256[] memory holdings;\n        (tokens, holdings, ) = getTokensData();\n\n        uint256 numTokens = tokens.length;\n        uint256[] memory fees = guardiansFee[msg.sender];\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            // slither-disable-next-line reentrancy-no-eth\n            guardiansFeeTotal[i] -= fees[i];\n            guardiansFee[msg.sender][i] = 0;\n            tokens[i].safeTransfer(msg.sender, fees[i]);\n        }\n\n        // slither-disable-next-line reentrancy-no-eth\n        if (msg.sender != guardian) {\n            delete guardiansFee[msg.sender];\n        }\n\n        // slither-disable-next-line reentrancy-events\n        emit DistributeGuardianFees(msg.sender, fees);\n    }\n\n    /// MULTI ASSET VAULT INTERFACE ///\n\n    /// @inheritdoc IMultiAssetVault\n    function holding(uint256 index) external view override returns (uint256) {\n        uint256[] memory amounts = getHoldings();\n        return amounts[index];\n    }\n\n    /// @inheritdoc IMultiAssetVault\n    function getHoldings()\n        public\n        view\n        override\n        returns (uint256[] memory amounts)\n    {\n        (, amounts, ) = getTokensData();\n    }\n\n    /// USER API ///\n\n    /// @inheritdoc IUserAPI\n    // prettier-ignore\n    function isSwapEnabled()\n        external\n        view\n        override\n        returns (bool)\n    {\n        return pool.getSwapEnabled();\n    }\n\n    /// @inheritdoc IUserAPI\n    // prettier-ignore\n    function getSwapFee()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return pool.getSwapFeePercentage();\n    }\n\n    /// @inheritdoc IUserAPI\n    function getTokensData()\n        public\n        view\n        override\n        returns (\n            IERC20[] memory,\n            uint256[] memory,\n            uint256\n        )\n    {\n        return bVault.getPoolTokens(poolId);\n    }\n\n    /// @inheritdoc IUserAPI\n    function getTokens()\n        public\n        view\n        override\n        returns (IERC20[] memory tokens)\n    {\n        (tokens, , ) = getTokensData();\n    }\n\n    /// @inheritdoc IUserAPI\n    function getNormalizedWeights()\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        return pool.getNormalizedWeights();\n    }\n\n    /// @notice Disable ownership renounceable\n    function renounceOwnership() public override onlyOwner {\n        revert Aera__VaultIsNotRenounceable();\n    }\n\n    /// @inheritdoc IProtocolAPI\n    function transferOwnership(address newOwner)\n        public\n        override(IProtocolAPI, Ownable)\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            revert Aera__OwnerIsZeroAddress();\n        }\n        pendingOwner = newOwner;\n        emit OwnershipTransferOffered(owner(), newOwner);\n    }\n\n    /// @inheritdoc IProtocolAPI\n    function cancelOwnershipTransfer() external override onlyOwner {\n        if (pendingOwner == address(0)) {\n            revert Aera__NoPendingOwnershipTransfer();\n        }\n        emit OwnershipTransferCanceled(owner(), pendingOwner);\n        pendingOwner = address(0);\n    }\n\n    /// @inheritdoc IUserAPI\n    function acceptOwnership() external override {\n        if (msg.sender != pendingOwner) {\n            revert Aera__NotPendingOwner();\n        }\n        _transferOwnership(pendingOwner);\n        pendingOwner = address(0);\n    }\n\n    /// INTERNAL FUNCTIONS ///\n\n    /// @notice Deposit amount of tokens.\n    /// @dev Will only be called by deposit() and depositIfBalanceUnchanged()\n    ///      It calls updateWeights() function which cancels\n    ///      current active weights change schedule.\n    /// @param tokenWithAmount Deposit tokens with amount.\n    function depositTokens(TokenValue[] calldata tokenWithAmount) internal {\n        lockGuardianFees();\n\n        IERC20[] memory tokens;\n        uint256[] memory holdings;\n        (tokens, holdings, ) = getTokensData();\n        uint256 numTokens = tokens.length;\n\n        uint256[] memory weights = pool.getNormalizedWeights();\n        uint256[] memory newBalances = new uint256[](numTokens);\n        uint256[] memory amounts = getValuesFromTokenWithValues(\n            tokenWithAmount,\n            tokens\n        );\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            if (amounts[i] != 0) {\n                newBalances[i] = depositToken(tokens[i], amounts[i]);\n            }\n        }\n\n        /// Set managed balance of pool as amounts\n        /// i.e. Deposit amounts of tokens to pool from Aera Vault\n        updatePoolBalance(newBalances, IBVault.PoolBalanceOpKind.UPDATE);\n        /// Decrease managed balance and increase cash balance of pool\n        /// i.e. Move amounts from managed balance to cash balance\n        updatePoolBalance(newBalances, IBVault.PoolBalanceOpKind.DEPOSIT);\n\n        uint256[] memory newHoldings = getHoldings();\n        uint256 weightSum;\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            if (amounts[i] != 0) {\n                weights[i] = (weights[i] * newHoldings[i]) / holdings[i];\n                newBalances[i] = newHoldings[i] - holdings[i];\n            }\n\n            weightSum += weights[i];\n        }\n\n        /// It cancels current active weights change schedule\n        /// and update weights with newWeights\n        updateWeights(weights, weightSum);\n\n        // slither-disable-next-line reentrancy-events\n        emit Deposit(amounts, newBalances, pool.getNormalizedWeights());\n    }\n\n    /// @notice Withdraw tokens up to requested amounts.\n    /// @dev Will only be called by withdraw() and withdrawIfBalanceUnchanged()\n    ///      It calls updateWeights() function which cancels\n    ///      current active weights change schedule.\n    /// @param tokenWithAmount Requested tokens with amount.\n    function withdrawTokens(TokenValue[] calldata tokenWithAmount) internal {\n        lockGuardianFees();\n\n        IERC20[] memory tokens;\n        uint256[] memory holdings;\n        (tokens, holdings, ) = getTokensData();\n        uint256 numTokens = tokens.length;\n\n        uint256[] memory allowances = validator.allowance();\n        uint256[] memory weights = pool.getNormalizedWeights();\n        uint256[] memory balances = new uint256[](numTokens);\n        uint256[] memory amounts = getValuesFromTokenWithValues(\n            tokenWithAmount,\n            tokens\n        );\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            if (amounts[i] > holdings[i] || amounts[i] > allowances[i]) {\n                revert Aera__AmountExceedAvailable(\n                    address(tokens[i]),\n                    amounts[i],\n                    Math.min(holdings[i], allowances[i])\n                );\n            }\n\n            if (amounts[i] != 0) {\n                balances[i] = tokens[i].balanceOf(address(this));\n            }\n        }\n\n        withdrawFromPool(amounts);\n\n        uint256 weightSum;\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            if (amounts[i] != 0) {\n                balances[i] = tokens[i].balanceOf(address(this)) - balances[i];\n                tokens[i].safeTransfer(owner(), balances[i]);\n\n                uint256 newBalance = holdings[i] - amounts[i];\n                weights[i] = (weights[i] * newBalance) / holdings[i];\n            }\n\n            weightSum += weights[i];\n        }\n\n        /// It cancels current active weights change schedule\n        /// and update weights with newWeights\n        updateWeights(weights, weightSum);\n\n        // slither-disable-next-line reentrancy-events\n        emit Withdraw(\n            amounts,\n            balances,\n            allowances,\n            pool.getNormalizedWeights()\n        );\n    }\n\n    /// @notice Withdraw tokens from Balancer Pool to Aera Vault\n    /// @dev Will only be called by withdrawTokens(), returnFunds()\n    ///      and lockGuardianFees()\n    function withdrawFromPool(uint256[] memory amounts) internal {\n        uint256[] memory managed = new uint256[](amounts.length);\n\n        /// Decrease cash balance and increase managed balance of pool\n        /// i.e. Move amounts from cash balance to managed balance\n        /// and withdraw token amounts from pool to Aera Vault\n        updatePoolBalance(amounts, IBVault.PoolBalanceOpKind.WITHDRAW);\n        /// Adjust managed balance of pool as the zero array\n        updatePoolBalance(managed, IBVault.PoolBalanceOpKind.UPDATE);\n    }\n\n    /// @notice Calculate guardian fees and lock the tokens in Vault.\n    /// @dev Will only be called by claimGuardianFees(), setGuardian(),\n    ///      initiateFinalization(), deposit() and withdraw().\n    // slither-disable-next-line timestamp\n    function lockGuardianFees() internal {\n        if (managementFee == 0) {\n            return;\n        }\n        if (block.timestamp <= lastFeeCheckpoint) {\n            return;\n        }\n\n        IERC20[] memory tokens;\n        uint256[] memory holdings;\n        (tokens, holdings, ) = getTokensData();\n\n        uint256 numTokens = tokens.length;\n        uint256[] memory newFees = new uint256[](numTokens);\n        uint256[] memory balances = new uint256[](numTokens);\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            balances[i] = tokens[i].balanceOf(address(this));\n            newFees[i] =\n                (holdings[i] *\n                    (block.timestamp - lastFeeCheckpoint) *\n                    managementFee) /\n                ONE;\n        }\n\n        lastFeeCheckpoint = block.timestamp;\n\n        withdrawFromPool(newFees);\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            newFees[i] = tokens[i].balanceOf(address(this)) - balances[i];\n            // slither-disable-next-line reentrancy-benign\n            guardiansFee[guardian][i] += newFees[i];\n            guardiansFeeTotal[i] += newFees[i];\n        }\n    }\n\n    /// @notice Calculate change ratio for weight upgrade.\n    /// @dev Will only be called by updateWeightsGradually().\n    /// @param weight Current weight.\n    /// @param targetWeight Target weight.\n    /// @return Change ratio(>1) from current weight to target weight.\n    function getWeightChangeRatio(uint256 weight, uint256 targetWeight)\n        internal\n        pure\n        returns (uint256)\n    {\n        return\n            weight > targetWeight\n                ? (ONE * weight) / targetWeight\n                : (ONE * targetWeight) / weight;\n    }\n\n    /// @notice Return an array of values from given tokenWithValues.\n    /// @dev Will only be called by enableTradingWithWeights(), updateWeightsGradually().\n    ///      initialDeposit(), depositTokens() and withdrawTokens().\n    ///      The values could be amounts or weights.\n    /// @param tokenWithValues Tokens with values.\n    /// @param tokens Array of pool tokens.\n    /// @return Array of values.\n    function getValuesFromTokenWithValues(\n        TokenValue[] calldata tokenWithValues,\n        IERC20[] memory tokens\n    ) internal pure returns (uint256[] memory) {\n        uint256 numTokens = tokens.length;\n\n        if (numTokens != tokenWithValues.length) {\n            revert Aera__ValueLengthIsNotSame(\n                numTokens,\n                tokenWithValues.length\n            );\n        }\n\n        uint256[] memory values = new uint256[](numTokens);\n        for (uint256 i = 0; i < numTokens; i++) {\n            if (address(tokenWithValues[i].token) != address(tokens[i])) {\n                revert Aera__DifferentTokensInPosition(\n                    address(tokenWithValues[i].token),\n                    address(tokens[i]),\n                    i\n                );\n            }\n            values[i] = tokenWithValues[i].value;\n        }\n\n        return values;\n    }\n\n    /// @dev PoolBalanceOpKind has three kinds\n    /// Withdrawal - decrease the Pool's cash, but increase its managed balance,\n    ///              leaving the total balance unchanged.\n    /// Deposit - increase the Pool's cash, but decrease its managed balance,\n    ///           leaving the total balance unchanged.\n    /// Update - don't affect the Pool's cash balance, but change the managed balance,\n    ///          so it does alter the total. The external amount can be either\n    ///          increased or decreased by this call (i.e., reporting a gain or a loss).\n    function updatePoolBalance(\n        uint256[] memory amounts,\n        IBVault.PoolBalanceOpKind kind\n    ) internal {\n        uint256 numAmounts = amounts.length;\n        IBVault.PoolBalanceOp[] memory ops = new IBVault.PoolBalanceOp[](\n            numAmounts\n        );\n        IERC20[] memory tokens = getTokens();\n\n        bytes32 balancerPoolId = poolId;\n        for (uint256 i = 0; i < numAmounts; i++) {\n            ops[i].kind = kind;\n            ops[i].poolId = balancerPoolId;\n            ops[i].token = tokens[i];\n            ops[i].amount = amounts[i];\n        }\n\n        bVault.managePoolBalance(ops);\n    }\n\n    /// @notice Update weights of tokens in the pool.\n    /// @dev Will only be called by deposit(), withdraw() and cancelWeightUpdates().\n    function updateWeights(uint256[] memory weights, uint256 weightSum)\n        internal\n    {\n        uint256 numWeights = weights.length;\n        uint256[] memory newWeights = new uint256[](numWeights);\n\n        uint256 adjustedSum;\n        for (uint256 i = 0; i < numWeights; i++) {\n            newWeights[i] = (weights[i] * ONE) / weightSum;\n            adjustedSum += newWeights[i];\n        }\n\n        newWeights[0] = newWeights[0] + ONE - adjustedSum;\n\n        poolController.updateWeightsGradually(\n            block.timestamp,\n            block.timestamp,\n            newWeights\n        );\n    }\n\n    /// @notice Deposit token to the pool.\n    /// @dev Will only be called by deposit().\n    /// @param token Address of the token to deposit.\n    /// @param amount Amount to deposit.\n    /// @return Actual deposited amount excluding fee on transfer.\n    // slither-disable-next-line timestamp\n    function depositToken(IERC20 token, uint256 amount)\n        internal\n        returns (uint256)\n    {\n        // slither-disable-next-line calls-loop\n        uint256 balance = token.balanceOf(address(this));\n        token.safeTransferFrom(owner(), address(this), amount);\n        // slither-disable-next-line calls-loop\n        balance = token.balanceOf(address(this)) - balance;\n\n        // slither-disable-next-line calls-loop\n        uint256 allowance = token.allowance(address(this), address(bVault));\n        if (allowance > 0) {\n            token.safeDecreaseAllowance(address(bVault), allowance);\n        }\n        token.safeIncreaseAllowance(address(bVault), balance);\n\n        return balance;\n    }\n\n    /// @notice Return all funds to owner.\n    /// @dev Will only be called by finalize().\n    /// @return amounts Exact returned amount of tokens.\n    function returnFunds() internal returns (uint256[] memory amounts) {\n        IERC20[] memory tokens;\n        uint256[] memory holdings;\n        (tokens, holdings, ) = getTokensData();\n\n        uint256 numTokens = tokens.length;\n        amounts = new uint256[](numTokens);\n\n        withdrawFromPool(holdings);\n\n        uint256 amount;\n        IERC20 token;\n        for (uint256 i = 0; i < numTokens; i++) {\n            token = tokens[i];\n            amount = token.balanceOf(address(this)) - guardiansFeeTotal[i];\n            token.safeTransfer(owner(), amount);\n            amounts[i] = amount;\n        }\n    }\n\n    /// @notice Enable or disable swap.\n    /// @dev Will only be called by enableTradingRiskingArbitrage(), enableTradingWithWeights()\n    ///      and disableTrading().\n    /// @param swapEnabled Swap status.\n    function setSwapEnabled(bool swapEnabled) internal {\n        poolController.setSwapEnabled(swapEnabled);\n        // slither-disable-next-line reentrancy-events\n        emit SetSwapEnabled(swapEnabled);\n    }\n\n    /// @notice Check if the address can be a guardian.\n    /// @dev Will only be called by constructor and setGuardian()\n    /// @param newGuardian Address to check.\n    function checkGuardianAddress(address newGuardian) internal {\n        if (newGuardian == address(0)) {\n            revert Aera__GuardianIsZeroAddress();\n        }\n        if (newGuardian == owner()) {\n            revert Aera__GuardianIsOwner(newGuardian);\n        }\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "contracts/v1/interfaces/IBManagedPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../dependencies/openzeppelin/IERC20.sol\";\nimport \"./IBVault.sol\";\n\ninterface IBManagedPoolFactory {\n    struct NewPoolParams {\n        IBVault vault;\n        string name;\n        string symbol;\n        IERC20[] tokens;\n        uint256[] normalizedWeights;\n        address[] assetManagers;\n        uint256 swapFeePercentage;\n        uint256 pauseWindowDuration;\n        uint256 bufferPeriodDuration;\n        address owner;\n        bool swapEnabledOnStart;\n        bool mustAllowlistLPs;\n        uint256 managementSwapFeePercentage;\n    }\n\n    struct BasePoolRights {\n        bool canTransferOwnership;\n        bool canChangeSwapFee;\n        bool canUpdateMetadata;\n    }\n\n    struct ManagedPoolRights {\n        bool canChangeWeights;\n        bool canDisableSwaps;\n        bool canSetMustAllowlistLPs;\n        bool canSetCircuitBreakers;\n        bool canChangeTokens;\n    }\n\n    function create(\n        NewPoolParams memory poolParams,\n        BasePoolRights memory basePoolRights,\n        ManagedPoolRights memory managedPoolRights,\n        uint256 minWeightChangeDuration\n    ) external returns (address);\n}\n"
    },
    "contracts/v1/interfaces/IBManagedPoolController.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.11;\n\ninterface IBManagedPoolController {\n    function updateWeightsGradually(\n        uint256 startTime,\n        uint256 endTime,\n        uint256[] memory endWeights\n    ) external;\n\n    function setSwapEnabled(bool swapEnabled) external;\n\n    function setSwapFeePercentage(uint256 swapFeePercentage) external;\n}\n"
    },
    "contracts/v1/interfaces/IBMerkleOrchard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../dependencies/openzeppelin/IERC20.sol\";\n\ninterface IBMerkleOrchard {\n    struct Claim {\n        uint256 distributionId;\n        uint256 balance;\n        address distributor;\n        uint256 tokenIndex;\n        bytes32[] merkleProof;\n    }\n\n    function claimDistributions(\n        address claimer,\n        Claim[] memory claims,\n        IERC20[] memory tokens\n    ) external;\n}\n"
    },
    "contracts/v1/interfaces/IBVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../dependencies/openzeppelin/IERC20.sol\";\n\ninterface IBVault {\n    enum JoinKind {\n        INIT,\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\n    }\n\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IERC20[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IERC20[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    enum PoolBalanceChangeKind {\n        JOIN,\n        EXIT\n    }\n\n    enum SwapKind {\n        GIVEN_IN,\n        GIVEN_OUT\n    }\n\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IERC20 assetIn;\n        IERC20 assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    function batchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IERC20[] memory assets,\n        FundManagement memory funds,\n        int256[] memory limits,\n        uint256 deadline\n    ) external payable returns (int256[] memory);\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\n\n    struct PoolBalanceOp {\n        PoolBalanceOpKind kind;\n        bytes32 poolId;\n        IERC20 token;\n        uint256 amount;\n    }\n\n    enum PoolBalanceOpKind {\n        WITHDRAW,\n        DEPOSIT,\n        UPDATE\n    }\n\n    function setPaused(bool paused) external;\n}\n"
    },
    "contracts/v1/interfaces/IBManagedPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../dependencies/openzeppelin/IERC20.sol\";\nimport \"./IBVault.sol\";\n\ninterface IBManagedPool {\n    function getSwapEnabled() external view returns (bool);\n\n    function getSwapFeePercentage() external view returns (uint256);\n\n    function getNormalizedWeights() external view returns (uint256[] memory);\n\n    function getPoolId() external view returns (bytes32);\n\n    function getVault() external view returns (IBVault);\n\n    function getOwner() external view returns (address);\n}\n"
    },
    "contracts/v1/interfaces/IAeraVaultV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"./IUserAPI.sol\";\nimport \"./IGuardianAPI.sol\";\nimport \"./IProtocolAPI.sol\";\nimport \"./IMultiAssetVault.sol\";\n\n/// @title Interface for v1 vault.\n// solhint-disable-next-line no-empty-blocks\ninterface IAeraVaultV1 is\n    IUserAPI,\n    IGuardianAPI,\n    IProtocolAPI,\n    IMultiAssetVault\n{\n    // Use struct parameter to avoid stack too deep error.\n    // factory: Balancer Managed Pool Factory address.\n    // name: Name of Pool Token.\n    // symbol: Symbol of Pool Token.\n    // tokens: Token addresses.\n    // weights: Token weights.\n    // swapFeePercentage: Pool swap fee.\n    // guardian: Vault guardian address.\n    // validator: Withdrawal validator contract address.\n    // noticePeriod: Notice period (in seconds).\n    // managementFee: Management fee earned proportion per second.\n    // merkleOrchard: Balancer Merkle Orchard address.\n    // description: Simple vault text description.\n    struct NewVaultParams {\n        address factory;\n        string name;\n        string symbol;\n        IERC20[] tokens;\n        uint256[] weights;\n        uint256 swapFeePercentage;\n        address guardian;\n        address validator;\n        uint32 noticePeriod;\n        uint256 managementFee;\n        address merkleOrchard;\n        string description;\n    }\n}\n"
    },
    "contracts/v1/interfaces/IWithdrawalValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\n/// @title Withdrawal validation logic.\n/// @notice Represents the withdrawal conditions for a vault.\n/// @dev Should be extended by vault owner or guardian, deployed and attached\n///      to a vault instance. Withdrawal validator needs to respond to\n///      shortfall conditions and provide an accurate allowance.\ninterface IWithdrawalValidator {\n    /// @notice Determine how much of each token could be withdrawn under\n    ///         current conditions.\n    /// @return token0Amount, token1Amount The quantity of each token that\n    ///         can be withdrawn from the vault.\n    /// @dev Token quantity value should be interpreted with the same\n    ///      decimals as the token ERC20 balance.\n    function allowance() external returns (uint256[] memory);\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/v1/interfaces/IUserAPI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../dependencies/openzeppelin/IERC20.sol\";\n\n/// @title Vault public interface.\n/// @notice Interface for vault arbitrageurs and other observers.\ninterface IUserAPI {\n    /// @notice Check if vault trading is enabled.\n    /// @return If public swap is turned on, returns true, otherwise false.\n    function isSwapEnabled() external view returns (bool);\n\n    /// @notice Get swap fee.\n    /// @return Swap fee from underlying Balancer pool.\n    function getSwapFee() external view returns (uint256);\n\n    /// @notice Get Pool ID.\n    /// @return Pool ID of Balancer pool on Vault.\n    function poolId() external view returns (bytes32);\n\n    /// @notice Get Token Data of Balancer Pool.\n    /// @return tokens IERC20 tokens of Balancer pool.\n    /// @return balances Balances of tokens of Balancer pool.\n    /// @return lastChangeBlock Last updated Blocknumber.\n    function getTokensData()\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    /// @notice Get IERC20 Tokens Balancer Pool.\n    /// @return tokens IERC20 tokens of Balancer pool.\n    function getTokens() external view returns (IERC20[] memory);\n\n    /// @notice Get token weights.\n    /// @return Normalized weights of tokens on Balancer pool.\n    function getNormalizedWeights() external view returns (uint256[] memory);\n\n    /// @notice Accept ownership\n    function acceptOwnership() external;\n}\n"
    },
    "contracts/v1/interfaces/IGuardianAPI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../dependencies/openzeppelin/IERC20.sol\";\nimport \"./IProtocolAPI.sol\";\n\n/// @title Interface for vault guardian.\n/// @notice Supports parameter submission.\ninterface IGuardianAPI {\n    /// @notice Initiate weight move to target in given update window.\n    /// @dev These are checked by Balancer in internal transactions:\n    ///       If target weight length and token length match.\n    ///       If total sum of target weights is one.\n    ///       If target weight is greater than minimum.\n    /// @param tokenWithWeight Tokens with target weights.\n    /// @param startTime Timestamp at which weight movement should start.\n    /// @param endTime Timestamp at which the weights should reach target values.\n    function updateWeightsGradually(\n        IProtocolAPI.TokenValue[] memory tokenWithWeight,\n        uint256 startTime,\n        uint256 endTime\n    ) external;\n\n    /// @notice Cancel the active weight update schedule.\n    /// @dev Keep calculated weights from the schedule at the time.\n    function cancelWeightUpdates() external;\n\n    /// @notice Change swap fee.\n    /// @dev These are checked by Balancer in internal transactions:\n    ///       If new swap fee is less than maximum.\n    ///       If new swap fee is greater than minimum.\n    function setSwapFee(uint256 newSwapFee) external;\n\n    /// @notice Claim guardian fee.\n    /// @dev This function shouldn't be called too frequently.\n    function claimGuardianFees() external;\n\n    /* This function is defined in IProtocolAPI.sol\n    /// @notice Disable swap.\n    function disableTrading() external;\n    */\n}\n"
    },
    "contracts/v1/interfaces/IProtocolAPI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"./IBMerkleOrchard.sol\";\n\n/// @title Interface for protocol that owns treasury.\ninterface IProtocolAPI {\n    // Use struct parameter to prevent human error.\n    // token: Token address.\n    // value: Amount of weight of token.\n    struct TokenValue {\n        IERC20 token;\n        uint256 value;\n    }\n\n    /// @notice Initialize Vault with first deposit.\n    /// @dev Initial deposit must be performed before\n    ///      calling withdraw() or deposit() functions.\n    ///      It enables trading, so weights and balances should be in line\n    ///      with market spot prices, otherwise there is a significant risk\n    ///      of arbitrage.\n    ///      This is checked by Balancer in internal transactions:\n    ///       If token amount is not zero when join pool.\n    /// @param tokenWithAmount Deposit tokens with amount.\n    function initialDeposit(TokenValue[] memory tokenWithAmount) external;\n\n    /// @notice Deposit tokens into vault.\n    /// @dev It calls updateWeights() function\n    ///      which cancels current active weights change schedule.\n    /// @param tokenWithAmount Deposit tokens with amount.\n    function deposit(TokenValue[] memory tokenWithAmount) external;\n\n    /// @notice Deposit tokens into vault.\n    /// @dev It calls updateWeights() function\n    ///      which cancels current active weights change schedule.\n    ///      It reverts if balances were updated in the current block.\n    /// @param tokenWithAmount Deposit token with amount.\n    function depositIfBalanceUnchanged(TokenValue[] memory tokenWithAmount)\n        external;\n\n    /// @notice Withdraw tokens up to requested amounts.\n    /// @dev It calls updateWeights() function\n    ///      which cancels current active weights change schedule.\n    /// @param tokenWithAmount Requested tokens with amount.\n    function withdraw(TokenValue[] memory tokenWithAmount) external;\n\n    /// @notice Withdraw tokens up to requested amounts.\n    /// @dev It calls updateWeights() function\n    ///      which cancels current active weights change schedule.\n    ///      It reverts if balances were updated in the current block.\n    /// @param tokenWithAmount Requested tokens with amount.\n    function withdrawIfBalanceUnchanged(TokenValue[] memory tokenWithAmount)\n        external;\n\n    /// @notice Initiate vault destruction and return all funds to treasury owner.\n    function initiateFinalization() external;\n\n    /// @notice Destroy vault and returns all funds to treasury owner.\n    function finalize() external;\n\n    /// @notice Change guardian.\n    function setGuardian(address newGuardian) external;\n\n    /// @notice Withdraw any tokens accidentally sent to vault.\n    function sweep(address token, uint256 amount) external;\n\n    /// @notice Enable swap with current weights.\n    function enableTradingRiskingArbitrage() external;\n\n    /// @notice Enable swap with updating weights.\n    /// @dev These are checked by Balancer in internal transactions:\n    ///       If weight length and token length match.\n    ///       If total sum of weights is one.\n    ///       If weight is greater than minimum.\n    /// @param tokenWithWeight Tokens with new weights.\n    function enableTradingWithWeights(TokenValue[] memory tokenWithWeight)\n        external;\n\n    /// @notice Disable swap.\n    function disableTrading() external;\n\n    /// @notice Claim Balancer rewards.\n    /// @dev It calls claimDistributions() function of Balancer MerkleOrchard.\n    ///      Once this function is called, the tokens will be transferred to\n    ///      the Vault and it can be distributed via sweep function.\n    /// @param claims An array of claims provided as a claim struct.\n    ///        See https://docs.balancer.fi/products/merkle-orchard/claiming-tokens#claiming-from-the-contract-directly.\n    /// @param tokens An array consisting of tokens to be claimed.\n    function claimRewards(\n        IBMerkleOrchard.Claim[] memory claims,\n        IERC20[] memory tokens\n    ) external;\n\n    /// @notice Offer ownership to another address\n    /// @dev It disables immediate transfer of ownership\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Cancel current pending ownership transfer\n    function cancelOwnershipTransfer() external;\n}\n"
    },
    "contracts/v1/interfaces/IMultiAssetVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\n/// @title Multi-asset vault interface.\ninterface IMultiAssetVault {\n    /// @notice Balance of token with given index.\n    /// @return Token balance in underlying pool.\n    function holding(uint256 index) external view returns (uint256);\n\n    /// @notice Underlying token balances.\n    /// @return Token balances in underlying pool\n    function getHoldings() external view returns (uint256[] memory);\n}\n"
    },
    "contracts/v1/mocks/AeraVaultV1Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../AeraVaultV1.sol\";\n\n/**\n * @dev Mock AeraVaultV1 with getting spot prices.\n *      THIS CONTRACT IS FOR TESTING PURPOSES ONLY. DO NOT USE IN PRODUCTION.\n */\ncontract AeraVaultV1Mock is AeraVaultV1 {\n    // solhint-disable no-empty-blocks\n    constructor(NewVaultParams memory vaultParams) AeraVaultV1(vaultParams) {}\n\n    function getSpotPrice(address tokenIn, address tokenOut)\n        external\n        view\n        returns (uint256)\n    {\n        if (tokenIn == tokenOut) {\n            return ONE;\n        }\n\n        IERC20[] memory tokens;\n        uint256[] memory holdings;\n        (tokens, holdings, ) = getTokensData();\n        uint256[] memory weights = pool.getNormalizedWeights();\n\n        uint256 tokenInId = type(uint256).max;\n        uint256 tokenOutId = type(uint256).max;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (tokenIn == address(tokens[i])) {\n                tokenInId = i;\n                if (tokenOutId < type(uint256).max) {\n                    break;\n                }\n            } else if (tokenOut == address(tokens[i])) {\n                tokenOutId = i;\n                if (tokenInId < type(uint256).max) {\n                    break;\n                }\n            }\n        }\n\n        if (\n            tokenInId == type(uint256).max || tokenOutId == type(uint256).max\n        ) {\n            return 0;\n        }\n\n        return\n            calcSpotPrice(\n                holdings[tokenInId],\n                weights[tokenInId],\n                holdings[tokenOutId],\n                weights[tokenOutId],\n                pool.getSwapFeePercentage()\n            );\n    }\n\n    function getSpotPrices(address tokenIn)\n        external\n        view\n        returns (uint256[] memory spotPrices)\n    {\n        IERC20[] memory tokens;\n        uint256[] memory holdings;\n        (tokens, holdings, ) = getTokensData();\n        uint256[] memory weights = pool.getNormalizedWeights();\n        spotPrices = new uint256[](tokens.length);\n\n        uint256 tokenInId = type(uint256).max;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (tokenIn == address(tokens[i])) {\n                tokenInId = i;\n                break;\n            }\n        }\n\n        if (tokenInId < type(uint256).max) {\n            uint256 swapFee = pool.getSwapFeePercentage();\n            for (uint256 i = 0; i < tokens.length; i++) {\n                if (i == tokenInId) {\n                    spotPrices[i] = ONE;\n                } else {\n                    spotPrices[i] = calcSpotPrice(\n                        holdings[tokenInId],\n                        weights[tokenInId],\n                        holdings[i],\n                        weights[i],\n                        swapFee\n                    );\n                }\n            }\n        }\n    }\n\n    /// INTERNAL FUNCTIONS ///\n\n    /// @notice Calculate spot price from balances and weights.\n    /// @dev Will only be called by getSpotPrice().\n    /// @return Spot Price from balances and weights.\n    function calcSpotPrice(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 swapFee\n    ) internal pure returns (uint256) {\n        uint256 numer = (tokenBalanceIn * ONE) / tokenWeightIn;\n        uint256 denom = (tokenBalanceOut * ONE) / tokenWeightOut;\n        uint256 ratio = (numer * ONE) / denom;\n        uint256 scale = (ONE * ONE) / (ONE - swapFee);\n        return (ratio * scale) / ONE;\n    }\n}\n"
    },
    "contracts/v1/PermissiveWithdrawalValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"./dependencies/openzeppelin/ERC165.sol\";\nimport { IWithdrawalValidator } from \"./interfaces/IWithdrawalValidator.sol\";\n\n/// @notice A withdrawal validator that validates withdrawals of an arbitrary size.\ncontract PermissiveWithdrawalValidator is ERC165, IWithdrawalValidator {\n    uint256 public constant ANY_AMOUNT = type(uint256).max;\n    uint8 public immutable count;\n\n    constructor(uint8 tokenCount) {\n        count = tokenCount;\n    }\n\n    /// @inheritdoc IWithdrawalValidator\n    function allowance()\n        external\n        view\n        override\n        returns (uint256[] memory amounts)\n    {\n        amounts = new uint256[](count);\n        for (uint256 i = 0; i < count; i++) {\n            amounts[i] = ANY_AMOUNT;\n        }\n    }\n\n    /// @dev Returns true if this contract implements the interface defined by\n    /// `interfaceId`. See the corresponding\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n    /// to learn more about how these ids are created.\n    /// This function call must use less than 30 000 gas.\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IWithdrawalValidator).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/v1/mocks/WithdrawalValidatorMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../dependencies/openzeppelin/Ownable.sol\";\nimport \"../dependencies/openzeppelin/ERC165.sol\";\nimport \"../interfaces/IWithdrawalValidator.sol\";\n\n/// @notice A withdrawal validator that validates withdrawals of an arbitrary size.\ncontract WithdrawalValidatorMock is ERC165, IWithdrawalValidator, Ownable {\n    uint256[] public allowances;\n    uint8 public immutable count;\n\n    constructor(uint8 tokenCount) {\n        count = tokenCount;\n        allowances = new uint256[](tokenCount);\n    }\n\n    function setAllowance(uint256 index, uint256 amount) external onlyOwner {\n        allowances[index] = amount;\n    }\n\n    function setAllowances(uint256[] calldata amounts) external onlyOwner {\n        allowances = amounts;\n    }\n\n    function allowance() external override returns (uint256[] memory) {\n        return allowances;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IWithdrawalValidator).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./ERC20Burnable.sol\";\nimport \"./ERC20Pausable.sol\";\nimport \"./AccessControlEnumerable.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"./Context.sol\";\nimport \"./Strings.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/v1/dependencies/openzeppelin/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/v1/mocks/kovan/OrangesKovan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../../dependencies/openzeppelin/ERC20PresetMinterPauser.sol\";\n\n/// @notice Mock token to be used in Kovan Balancer pools as token1.\n/// @dev THIS CONTRACT IS FOR TESTING PURPOSES ONLY. DO NOT USE IN PRODUCTION.\ncontract OrangesKovan is ERC20PresetMinterPauser {\n    // solhint-disable no-empty-blocks\n    constructor() ERC20PresetMinterPauser(\"Oranges\", \"ORNGZ\") {}\n}\n"
    },
    "contracts/v1/mocks/kovan/MangosKovan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../../dependencies/openzeppelin/ERC20PresetMinterPauser.sol\";\n\n/// @notice Mock token to be used in Kovan Balancer pools as token0.\n/// @dev THIS CONTRACT IS FOR TESTING PURPOSES ONLY. DO NOT USE IN PRODUCTION.\ncontract MangosKovan is ERC20PresetMinterPauser {\n    // solhint-disable no-empty-blocks\n    constructor() ERC20PresetMinterPauser(\"Mangoes\", \"MANGO\") {}\n}\n"
    },
    "contracts/v1/mocks/kovan/KiwisKovan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../../dependencies/openzeppelin/ERC20PresetMinterPauser.sol\";\n\n/// @notice Mock token to be used in Kovan Balancer pools as token0.\n/// @dev THIS CONTRACT IS FOR TESTING PURPOSES ONLY. DO NOT USE IN PRODUCTION.\ncontract KiwisKovan is ERC20PresetMinterPauser {\n    // solhint-disable no-empty-blocks\n    constructor() ERC20PresetMinterPauser(\"Kiwis\", \"KIWIZ\") {}\n}\n"
    },
    "contracts/v1/mocks/kovan/ApplesKovan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../../dependencies/openzeppelin/ERC20PresetMinterPauser.sol\";\n\n/// @notice Mock token to be used in Kovan Balancer pools as token0.\n/// @dev THIS CONTRACT IS FOR TESTING PURPOSES ONLY. DO NOT USE IN PRODUCTION.\ncontract ApplesKovan is ERC20PresetMinterPauser {\n    // solhint-disable no-empty-blocks\n    constructor() ERC20PresetMinterPauser(\"Apples\", \"APPLZ\") {}\n}\n"
    },
    "contracts/v1/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../dependencies/openzeppelin/ERC20.sol\";\n\n/**\n * @dev Mock ERC20 token with initial total supply and custom decimals.\n *      THIS CONTRACT IS FOR TESTING PURPOSES ONLY. DO NOT USE IN PRODUCTION.\n */\ncontract ERC20Mock is ERC20 {\n    uint8 internal _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 totalSupply_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n        _mint(msg.sender, totalSupply_);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/v1/mocks/InvalidValidatorMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"../dependencies/openzeppelin/ERC165.sol\";\n\n/// @notice A withdrawal validator that validates withdrawals of an arbitrary size.\ncontract InvalidValidatorMock is ERC165 {\n    // solhint-disable-next-line no-unused-vars\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return false;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}